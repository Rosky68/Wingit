'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DataSetEden"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DataSetEden
    Inherits Global.System.Data.DataSet
    
    Private tableAUTORI As AUTORIDataTable
    
    Private tableMISTA As MISTADataTable
    
    Private tableODKAZY As ODKAZYDataTable
    
    Private tablePROVIDER As PROVIDERDataTable
    
    Private tableSLOVNIK As SLOVNIKDataTable
    
    Private tableTBIN As TBINDataTable
    
    Private tableTYPY As TYPYDataTable
    
    Private tableUSTREDNY As USTREDNYDataTable
    
    Private tableZAMKY As ZAMKYDataTable
    
    Private tableZAVAZNOSTI As ZAVAZNOSTIDataTable
    
    Private tableZAZNAMY As ZAZNAMYDataTable
    
    Private tablePS_ZAZ_ADD As PS_ZAZ_ADDDataTable
    
    Private tablePS_ZAZ_ADD_NEW As PS_ZAZ_ADD_NEWDataTable
    
    Private relationINTEG_59 As Global.System.Data.DataRelation
    
    Private relationINTEG_60 As Global.System.Data.DataRelation
    
    Private relationINTEG_61 As Global.System.Data.DataRelation
    
    Private relationINTEG_62 As Global.System.Data.DataRelation
    
    Private relationTBIN_FK_AUTOR2 As Global.System.Data.DataRelation
    
    Private relationFK_AUTOR2 As Global.System.Data.DataRelation
    
    Private relationINTEG_26 As Global.System.Data.DataRelation
    
    Private relationINTEG_27 As Global.System.Data.DataRelation
    
    Private relationINTEG_28 As Global.System.Data.DataRelation
    
    Private relationINTEG_33 As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("AUTORI")) Is Nothing) Then
                MyBase.Tables.Add(New AUTORIDataTable(ds.Tables("AUTORI")))
            End If
            If (Not (ds.Tables("MISTA")) Is Nothing) Then
                MyBase.Tables.Add(New MISTADataTable(ds.Tables("MISTA")))
            End If
            If (Not (ds.Tables("ODKAZY")) Is Nothing) Then
                MyBase.Tables.Add(New ODKAZYDataTable(ds.Tables("ODKAZY")))
            End If
            If (Not (ds.Tables("PROVIDER")) Is Nothing) Then
                MyBase.Tables.Add(New PROVIDERDataTable(ds.Tables("PROVIDER")))
            End If
            If (Not (ds.Tables("SLOVNIK")) Is Nothing) Then
                MyBase.Tables.Add(New SLOVNIKDataTable(ds.Tables("SLOVNIK")))
            End If
            If (Not (ds.Tables("TBIN")) Is Nothing) Then
                MyBase.Tables.Add(New TBINDataTable(ds.Tables("TBIN")))
            End If
            If (Not (ds.Tables("TYPY")) Is Nothing) Then
                MyBase.Tables.Add(New TYPYDataTable(ds.Tables("TYPY")))
            End If
            If (Not (ds.Tables("USTREDNY")) Is Nothing) Then
                MyBase.Tables.Add(New USTREDNYDataTable(ds.Tables("USTREDNY")))
            End If
            If (Not (ds.Tables("ZAMKY")) Is Nothing) Then
                MyBase.Tables.Add(New ZAMKYDataTable(ds.Tables("ZAMKY")))
            End If
            If (Not (ds.Tables("ZAVAZNOSTI")) Is Nothing) Then
                MyBase.Tables.Add(New ZAVAZNOSTIDataTable(ds.Tables("ZAVAZNOSTI")))
            End If
            If (Not (ds.Tables("ZAZNAMY")) Is Nothing) Then
                MyBase.Tables.Add(New ZAZNAMYDataTable(ds.Tables("ZAZNAMY")))
            End If
            If (Not (ds.Tables("PS_ZAZ_ADD")) Is Nothing) Then
                MyBase.Tables.Add(New PS_ZAZ_ADDDataTable(ds.Tables("PS_ZAZ_ADD")))
            End If
            If (Not (ds.Tables("PS_ZAZ_ADD_NEW")) Is Nothing) Then
                MyBase.Tables.Add(New PS_ZAZ_ADD_NEWDataTable(ds.Tables("PS_ZAZ_ADD_NEW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property AUTORI() As AUTORIDataTable
        Get
            Return Me.tableAUTORI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MISTA() As MISTADataTable
        Get
            Return Me.tableMISTA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ODKAZY() As ODKAZYDataTable
        Get
            Return Me.tableODKAZY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PROVIDER() As PROVIDERDataTable
        Get
            Return Me.tablePROVIDER
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SLOVNIK() As SLOVNIKDataTable
        Get
            Return Me.tableSLOVNIK
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TBIN() As TBINDataTable
        Get
            Return Me.tableTBIN
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TYPY() As TYPYDataTable
        Get
            Return Me.tableTYPY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property USTREDNY() As USTREDNYDataTable
        Get
            Return Me.tableUSTREDNY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZAMKY() As ZAMKYDataTable
        Get
            Return Me.tableZAMKY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZAVAZNOSTI() As ZAVAZNOSTIDataTable
        Get
            Return Me.tableZAVAZNOSTI
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ZAZNAMY() As ZAZNAMYDataTable
        Get
            Return Me.tableZAZNAMY
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PS_ZAZ_ADD() As PS_ZAZ_ADDDataTable
        Get
            Return Me.tablePS_ZAZ_ADD
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PS_ZAZ_ADD_NEW() As PS_ZAZ_ADD_NEWDataTable
        Get
            Return Me.tablePS_ZAZ_ADD_NEW
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DataSetEden = CType(MyBase.Clone,DataSetEden)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("AUTORI")) Is Nothing) Then
                MyBase.Tables.Add(New AUTORIDataTable(ds.Tables("AUTORI")))
            End If
            If (Not (ds.Tables("MISTA")) Is Nothing) Then
                MyBase.Tables.Add(New MISTADataTable(ds.Tables("MISTA")))
            End If
            If (Not (ds.Tables("ODKAZY")) Is Nothing) Then
                MyBase.Tables.Add(New ODKAZYDataTable(ds.Tables("ODKAZY")))
            End If
            If (Not (ds.Tables("PROVIDER")) Is Nothing) Then
                MyBase.Tables.Add(New PROVIDERDataTable(ds.Tables("PROVIDER")))
            End If
            If (Not (ds.Tables("SLOVNIK")) Is Nothing) Then
                MyBase.Tables.Add(New SLOVNIKDataTable(ds.Tables("SLOVNIK")))
            End If
            If (Not (ds.Tables("TBIN")) Is Nothing) Then
                MyBase.Tables.Add(New TBINDataTable(ds.Tables("TBIN")))
            End If
            If (Not (ds.Tables("TYPY")) Is Nothing) Then
                MyBase.Tables.Add(New TYPYDataTable(ds.Tables("TYPY")))
            End If
            If (Not (ds.Tables("USTREDNY")) Is Nothing) Then
                MyBase.Tables.Add(New USTREDNYDataTable(ds.Tables("USTREDNY")))
            End If
            If (Not (ds.Tables("ZAMKY")) Is Nothing) Then
                MyBase.Tables.Add(New ZAMKYDataTable(ds.Tables("ZAMKY")))
            End If
            If (Not (ds.Tables("ZAVAZNOSTI")) Is Nothing) Then
                MyBase.Tables.Add(New ZAVAZNOSTIDataTable(ds.Tables("ZAVAZNOSTI")))
            End If
            If (Not (ds.Tables("ZAZNAMY")) Is Nothing) Then
                MyBase.Tables.Add(New ZAZNAMYDataTable(ds.Tables("ZAZNAMY")))
            End If
            If (Not (ds.Tables("PS_ZAZ_ADD")) Is Nothing) Then
                MyBase.Tables.Add(New PS_ZAZ_ADDDataTable(ds.Tables("PS_ZAZ_ADD")))
            End If
            If (Not (ds.Tables("PS_ZAZ_ADD_NEW")) Is Nothing) Then
                MyBase.Tables.Add(New PS_ZAZ_ADD_NEWDataTable(ds.Tables("PS_ZAZ_ADD_NEW")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableAUTORI = CType(MyBase.Tables("AUTORI"),AUTORIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAUTORI) Is Nothing) Then
                Me.tableAUTORI.InitVars
            End If
        End If
        Me.tableMISTA = CType(MyBase.Tables("MISTA"),MISTADataTable)
        If (initTable = true) Then
            If (Not (Me.tableMISTA) Is Nothing) Then
                Me.tableMISTA.InitVars
            End If
        End If
        Me.tableODKAZY = CType(MyBase.Tables("ODKAZY"),ODKAZYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableODKAZY) Is Nothing) Then
                Me.tableODKAZY.InitVars
            End If
        End If
        Me.tablePROVIDER = CType(MyBase.Tables("PROVIDER"),PROVIDERDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePROVIDER) Is Nothing) Then
                Me.tablePROVIDER.InitVars
            End If
        End If
        Me.tableSLOVNIK = CType(MyBase.Tables("SLOVNIK"),SLOVNIKDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSLOVNIK) Is Nothing) Then
                Me.tableSLOVNIK.InitVars
            End If
        End If
        Me.tableTBIN = CType(MyBase.Tables("TBIN"),TBINDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTBIN) Is Nothing) Then
                Me.tableTBIN.InitVars
            End If
        End If
        Me.tableTYPY = CType(MyBase.Tables("TYPY"),TYPYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTYPY) Is Nothing) Then
                Me.tableTYPY.InitVars
            End If
        End If
        Me.tableUSTREDNY = CType(MyBase.Tables("USTREDNY"),USTREDNYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUSTREDNY) Is Nothing) Then
                Me.tableUSTREDNY.InitVars
            End If
        End If
        Me.tableZAMKY = CType(MyBase.Tables("ZAMKY"),ZAMKYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZAMKY) Is Nothing) Then
                Me.tableZAMKY.InitVars
            End If
        End If
        Me.tableZAVAZNOSTI = CType(MyBase.Tables("ZAVAZNOSTI"),ZAVAZNOSTIDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZAVAZNOSTI) Is Nothing) Then
                Me.tableZAVAZNOSTI.InitVars
            End If
        End If
        Me.tableZAZNAMY = CType(MyBase.Tables("ZAZNAMY"),ZAZNAMYDataTable)
        If (initTable = true) Then
            If (Not (Me.tableZAZNAMY) Is Nothing) Then
                Me.tableZAZNAMY.InitVars
            End If
        End If
        Me.tablePS_ZAZ_ADD = CType(MyBase.Tables("PS_ZAZ_ADD"),PS_ZAZ_ADDDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePS_ZAZ_ADD) Is Nothing) Then
                Me.tablePS_ZAZ_ADD.InitVars
            End If
        End If
        Me.tablePS_ZAZ_ADD_NEW = CType(MyBase.Tables("PS_ZAZ_ADD_NEW"),PS_ZAZ_ADD_NEWDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePS_ZAZ_ADD_NEW) Is Nothing) Then
                Me.tablePS_ZAZ_ADD_NEW.InitVars
            End If
        End If
        Me.relationINTEG_59 = Me.Relations("INTEG_59")
        Me.relationINTEG_60 = Me.Relations("INTEG_60")
        Me.relationINTEG_61 = Me.Relations("INTEG_61")
        Me.relationINTEG_62 = Me.Relations("INTEG_62")
        Me.relationTBIN_FK_AUTOR2 = Me.Relations("TBIN_FK_AUTOR2")
        Me.relationFK_AUTOR2 = Me.Relations("FK_AUTOR2")
        Me.relationINTEG_26 = Me.Relations("INTEG_26")
        Me.relationINTEG_27 = Me.Relations("INTEG_27")
        Me.relationINTEG_28 = Me.Relations("INTEG_28")
        Me.relationINTEG_33 = Me.Relations("INTEG_33")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetEden"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DataSetEden.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableAUTORI = New AUTORIDataTable()
        MyBase.Tables.Add(Me.tableAUTORI)
        Me.tableMISTA = New MISTADataTable()
        MyBase.Tables.Add(Me.tableMISTA)
        Me.tableODKAZY = New ODKAZYDataTable()
        MyBase.Tables.Add(Me.tableODKAZY)
        Me.tablePROVIDER = New PROVIDERDataTable()
        MyBase.Tables.Add(Me.tablePROVIDER)
        Me.tableSLOVNIK = New SLOVNIKDataTable()
        MyBase.Tables.Add(Me.tableSLOVNIK)
        Me.tableTBIN = New TBINDataTable()
        MyBase.Tables.Add(Me.tableTBIN)
        Me.tableTYPY = New TYPYDataTable()
        MyBase.Tables.Add(Me.tableTYPY)
        Me.tableUSTREDNY = New USTREDNYDataTable()
        MyBase.Tables.Add(Me.tableUSTREDNY)
        Me.tableZAMKY = New ZAMKYDataTable()
        MyBase.Tables.Add(Me.tableZAMKY)
        Me.tableZAVAZNOSTI = New ZAVAZNOSTIDataTable()
        MyBase.Tables.Add(Me.tableZAVAZNOSTI)
        Me.tableZAZNAMY = New ZAZNAMYDataTable()
        MyBase.Tables.Add(Me.tableZAZNAMY)
        Me.tablePS_ZAZ_ADD = New PS_ZAZ_ADDDataTable()
        MyBase.Tables.Add(Me.tablePS_ZAZ_ADD)
        Me.tablePS_ZAZ_ADD_NEW = New PS_ZAZ_ADD_NEWDataTable()
        MyBase.Tables.Add(Me.tablePS_ZAZ_ADD_NEW)
        Me.relationINTEG_59 = New Global.System.Data.DataRelation("INTEG_59", New Global.System.Data.DataColumn() {Me.tableMISTA.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTBIN.ID_MISTOColumn}, false)
        Me.Relations.Add(Me.relationINTEG_59)
        Me.relationINTEG_60 = New Global.System.Data.DataRelation("INTEG_60", New Global.System.Data.DataColumn() {Me.tableAUTORI.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTBIN.ID_AUTORColumn}, false)
        Me.Relations.Add(Me.relationINTEG_60)
        Me.relationINTEG_61 = New Global.System.Data.DataRelation("INTEG_61", New Global.System.Data.DataColumn() {Me.tableZAVAZNOSTI.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTBIN.ID_ZAVAZNOSTColumn}, false)
        Me.Relations.Add(Me.relationINTEG_61)
        Me.relationINTEG_62 = New Global.System.Data.DataRelation("INTEG_62", New Global.System.Data.DataColumn() {Me.tableTYPY.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTBIN.ID_TYPColumn}, false)
        Me.Relations.Add(Me.relationINTEG_62)
        Me.relationTBIN_FK_AUTOR2 = New Global.System.Data.DataRelation("TBIN_FK_AUTOR2", New Global.System.Data.DataColumn() {Me.tableAUTORI.IDColumn}, New Global.System.Data.DataColumn() {Me.tableTBIN.ID_AUTOR2Column}, false)
        Me.Relations.Add(Me.relationTBIN_FK_AUTOR2)
        Me.relationFK_AUTOR2 = New Global.System.Data.DataRelation("FK_AUTOR2", New Global.System.Data.DataColumn() {Me.tableAUTORI.IDColumn}, New Global.System.Data.DataColumn() {Me.tableZAZNAMY.ID_AUTOR2Column}, false)
        Me.Relations.Add(Me.relationFK_AUTOR2)
        Me.relationINTEG_26 = New Global.System.Data.DataRelation("INTEG_26", New Global.System.Data.DataColumn() {Me.tableMISTA.IDColumn}, New Global.System.Data.DataColumn() {Me.tableZAZNAMY.ID_MISTOColumn}, false)
        Me.Relations.Add(Me.relationINTEG_26)
        Me.relationINTEG_27 = New Global.System.Data.DataRelation("INTEG_27", New Global.System.Data.DataColumn() {Me.tableAUTORI.IDColumn}, New Global.System.Data.DataColumn() {Me.tableZAZNAMY.ID_AUTORColumn}, false)
        Me.Relations.Add(Me.relationINTEG_27)
        Me.relationINTEG_28 = New Global.System.Data.DataRelation("INTEG_28", New Global.System.Data.DataColumn() {Me.tableZAVAZNOSTI.IDColumn}, New Global.System.Data.DataColumn() {Me.tableZAZNAMY.ID_ZAVAZNOSTColumn}, false)
        Me.Relations.Add(Me.relationINTEG_28)
        Me.relationINTEG_33 = New Global.System.Data.DataRelation("INTEG_33", New Global.System.Data.DataColumn() {Me.tableTYPY.IDColumn}, New Global.System.Data.DataColumn() {Me.tableZAZNAMY.ID_TYPColumn}, false)
        Me.Relations.Add(Me.relationINTEG_33)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeAUTORI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeMISTA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeODKAZY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePROVIDER() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeSLOVNIK() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTBIN() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeTYPY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeUSTREDNY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeZAMKY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeZAVAZNOSTI() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializeZAZNAMY() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePS_ZAZ_ADD() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializePS_ZAZ_ADD_NEW() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetEden = New DataSetEden()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub AUTORIRowChangeEventHandler(ByVal sender As Object, ByVal e As AUTORIRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub MISTARowChangeEventHandler(ByVal sender As Object, ByVal e As MISTARowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ODKAZYRowChangeEventHandler(ByVal sender As Object, ByVal e As ODKAZYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PROVIDERRowChangeEventHandler(ByVal sender As Object, ByVal e As PROVIDERRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub SLOVNIKRowChangeEventHandler(ByVal sender As Object, ByVal e As SLOVNIKRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TBINRowChangeEventHandler(ByVal sender As Object, ByVal e As TBINRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub TYPYRowChangeEventHandler(ByVal sender As Object, ByVal e As TYPYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub USTREDNYRowChangeEventHandler(ByVal sender As Object, ByVal e As USTREDNYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ZAMKYRowChangeEventHandler(ByVal sender As Object, ByVal e As ZAMKYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ZAVAZNOSTIRowChangeEventHandler(ByVal sender As Object, ByVal e As ZAVAZNOSTIRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub ZAZNAMYRowChangeEventHandler(ByVal sender As Object, ByVal e As ZAZNAMYRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PS_ZAZ_ADDRowChangeEventHandler(ByVal sender As Object, ByVal e As PS_ZAZ_ADDRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub PS_ZAZ_ADD_NEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PS_ZAZ_ADD_NEWRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class AUTORIDataTable
        Inherits Global.System.Data.TypedTableBase(Of AUTORIRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnAUTOR As Global.System.Data.DataColumn
        
        Private columnTELEFON As Global.System.Data.DataColumn
        
        Private columnMOBIL As Global.System.Data.DataColumn
        
        Private columnHESLO As Global.System.Data.DataColumn
        
        Private columnPOCET As Global.System.Data.DataColumn
        
        Private columnHODNOST As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "AUTORI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property AUTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAUTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TELEFONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MOBILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOBIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HESLOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHESLO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property POCETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOCET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HODNOSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHODNOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As AUTORIRow
            Get
                Return CType(Me.Rows(index),AUTORIRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AUTORIRowChanging As AUTORIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AUTORIRowChanged As AUTORIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AUTORIRowDeleting As AUTORIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event AUTORIRowDeleted As AUTORIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddAUTORIRow(ByVal row As AUTORIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddAUTORIRow(ByVal ID As Short, ByVal AUTOR As String, ByVal TELEFON As String, ByVal MOBIL As String, ByVal HESLO As Integer, ByVal POCET As Integer, ByVal HODNOST As Short) As AUTORIRow
            Dim rowAUTORIRow As AUTORIRow = CType(Me.NewRow,AUTORIRow)
            Dim columnValuesArray() As Object = New Object() {ID, AUTOR, TELEFON, MOBIL, HESLO, POCET, HODNOST}
            rowAUTORIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowAUTORIRow)
            Return rowAUTORIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As AUTORIDataTable = CType(MyBase.Clone,AUTORIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New AUTORIDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnAUTOR = MyBase.Columns("AUTOR")
            Me.columnTELEFON = MyBase.Columns("TELEFON")
            Me.columnMOBIL = MyBase.Columns("MOBIL")
            Me.columnHESLO = MyBase.Columns("HESLO")
            Me.columnPOCET = MyBase.Columns("POCET")
            Me.columnHODNOST = MyBase.Columns("HODNOST")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnAUTOR = New Global.System.Data.DataColumn("AUTOR", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAUTOR)
            Me.columnTELEFON = New Global.System.Data.DataColumn("TELEFON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFON)
            Me.columnMOBIL = New Global.System.Data.DataColumn("MOBIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOBIL)
            Me.columnHESLO = New Global.System.Data.DataColumn("HESLO", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHESLO)
            Me.columnPOCET = New Global.System.Data.DataColumn("POCET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOCET)
            Me.columnHODNOST = New Global.System.Data.DataColumn("HODNOST", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHODNOST)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.Unique = true
            Me.columnAUTOR.MaxLength = 50
            Me.columnTELEFON.MaxLength = 25
            Me.columnMOBIL.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewAUTORIRow() As AUTORIRow
            Return CType(Me.NewRow,AUTORIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New AUTORIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(AUTORIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AUTORIRowChangedEvent) Is Nothing) Then
                RaiseEvent AUTORIRowChanged(Me, New AUTORIRowChangeEvent(CType(e.Row,AUTORIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AUTORIRowChangingEvent) Is Nothing) Then
                RaiseEvent AUTORIRowChanging(Me, New AUTORIRowChangeEvent(CType(e.Row,AUTORIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AUTORIRowDeletedEvent) Is Nothing) Then
                RaiseEvent AUTORIRowDeleted(Me, New AUTORIRowChangeEvent(CType(e.Row,AUTORIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AUTORIRowDeletingEvent) Is Nothing) Then
                RaiseEvent AUTORIRowDeleting(Me, New AUTORIRowChangeEvent(CType(e.Row,AUTORIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveAUTORIRow(ByVal row As AUTORIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AUTORIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MISTADataTable
        Inherits Global.System.Data.TypedTableBase(Of MISTARow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnMISTO As Global.System.Data.DataColumn
        
        Private columnTELEFON As Global.System.Data.DataColumn
        
        Private columnMOBIL As Global.System.Data.DataColumn
        
        Private columnPOCET As Global.System.Data.DataColumn
        
        Private columnHODNOST As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MISTA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MISTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMISTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TELEFONColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTELEFON
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MOBILColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMOBIL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property POCETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOCET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HODNOSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHODNOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MISTARow
            Get
                Return CType(Me.Rows(index),MISTARow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MISTARowChanging As MISTARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MISTARowChanged As MISTARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MISTARowDeleting As MISTARowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event MISTARowDeleted As MISTARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddMISTARow(ByVal row As MISTARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddMISTARow(ByVal ID As Short, ByVal MISTO As String, ByVal TELEFON As String, ByVal MOBIL As String, ByVal POCET As Integer, ByVal HODNOST As Short) As MISTARow
            Dim rowMISTARow As MISTARow = CType(Me.NewRow,MISTARow)
            Dim columnValuesArray() As Object = New Object() {ID, MISTO, TELEFON, MOBIL, POCET, HODNOST}
            rowMISTARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMISTARow)
            Return rowMISTARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MISTADataTable = CType(MyBase.Clone,MISTADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MISTADataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnMISTO = MyBase.Columns("MISTO")
            Me.columnTELEFON = MyBase.Columns("TELEFON")
            Me.columnMOBIL = MyBase.Columns("MOBIL")
            Me.columnPOCET = MyBase.Columns("POCET")
            Me.columnHODNOST = MyBase.Columns("HODNOST")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnMISTO = New Global.System.Data.DataColumn("MISTO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMISTO)
            Me.columnTELEFON = New Global.System.Data.DataColumn("TELEFON", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTELEFON)
            Me.columnMOBIL = New Global.System.Data.DataColumn("MOBIL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOBIL)
            Me.columnPOCET = New Global.System.Data.DataColumn("POCET", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOCET)
            Me.columnHODNOST = New Global.System.Data.DataColumn("HODNOST", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHODNOST)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.Unique = true
            Me.columnMISTO.MaxLength = 50
            Me.columnTELEFON.MaxLength = 25
            Me.columnMOBIL.MaxLength = 25
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewMISTARow() As MISTARow
            Return CType(Me.NewRow,MISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MISTARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MISTARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MISTARowChangedEvent) Is Nothing) Then
                RaiseEvent MISTARowChanged(Me, New MISTARowChangeEvent(CType(e.Row,MISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MISTARowChangingEvent) Is Nothing) Then
                RaiseEvent MISTARowChanging(Me, New MISTARowChangeEvent(CType(e.Row,MISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MISTARowDeletedEvent) Is Nothing) Then
                RaiseEvent MISTARowDeleted(Me, New MISTARowChangeEvent(CType(e.Row,MISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MISTARowDeletingEvent) Is Nothing) Then
                RaiseEvent MISTARowDeleting(Me, New MISTARowChangeEvent(CType(e.Row,MISTARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveMISTARow(ByVal row As MISTARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MISTADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ODKAZYDataTable
        Inherits Global.System.Data.TypedTableBase(Of ODKAZYRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnODKAZ As Global.System.Data.DataColumn
        
        Private columnCESTA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ODKAZY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ODKAZColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnODKAZ
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CESTAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCESTA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ODKAZYRow
            Get
                Return CType(Me.Rows(index),ODKAZYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ODKAZYRowChanging As ODKAZYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ODKAZYRowChanged As ODKAZYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ODKAZYRowDeleting As ODKAZYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ODKAZYRowDeleted As ODKAZYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddODKAZYRow(ByVal row As ODKAZYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddODKAZYRow(ByVal ID As Integer, ByVal ODKAZ As String, ByVal CESTA As String) As ODKAZYRow
            Dim rowODKAZYRow As ODKAZYRow = CType(Me.NewRow,ODKAZYRow)
            Dim columnValuesArray() As Object = New Object() {ID, ODKAZ, CESTA}
            rowODKAZYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowODKAZYRow)
            Return rowODKAZYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByID(ByVal ID As Integer) As ODKAZYRow
            Return CType(Me.Rows.Find(New Object() {ID}),ODKAZYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ODKAZYDataTable = CType(MyBase.Clone,ODKAZYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ODKAZYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnODKAZ = MyBase.Columns("ODKAZ")
            Me.columnCESTA = MyBase.Columns("CESTA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnODKAZ = New Global.System.Data.DataColumn("ODKAZ", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnODKAZ)
            Me.columnCESTA = New Global.System.Data.DataColumn("CESTA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCESTA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnODKAZ}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnODKAZ.Unique = true
            Me.columnODKAZ.MaxLength = 30
            Me.columnCESTA.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewODKAZYRow() As ODKAZYRow
            Return CType(Me.NewRow,ODKAZYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ODKAZYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ODKAZYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ODKAZYRowChangedEvent) Is Nothing) Then
                RaiseEvent ODKAZYRowChanged(Me, New ODKAZYRowChangeEvent(CType(e.Row,ODKAZYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ODKAZYRowChangingEvent) Is Nothing) Then
                RaiseEvent ODKAZYRowChanging(Me, New ODKAZYRowChangeEvent(CType(e.Row,ODKAZYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ODKAZYRowDeletedEvent) Is Nothing) Then
                RaiseEvent ODKAZYRowDeleted(Me, New ODKAZYRowChangeEvent(CType(e.Row,ODKAZYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ODKAZYRowDeletingEvent) Is Nothing) Then
                RaiseEvent ODKAZYRowDeleting(Me, New ODKAZYRowChangeEvent(CType(e.Row,ODKAZYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveODKAZYRow(ByVal row As ODKAZYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ODKAZYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PROVIDERDataTable
        Inherits Global.System.Data.TypedTableBase(Of PROVIDERRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPROVIDER As Global.System.Data.DataColumn
        
        Private columnMASKA As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PROVIDER"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROVIDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVIDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MASKAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMASKA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PROVIDERRow
            Get
                Return CType(Me.Rows(index),PROVIDERRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROVIDERRowChanging As PROVIDERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROVIDERRowChanged As PROVIDERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROVIDERRowDeleting As PROVIDERRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PROVIDERRowDeleted As PROVIDERRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPROVIDERRow(ByVal row As PROVIDERRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPROVIDERRow(ByVal ID As Integer, ByVal PROVIDER As String, ByVal MASKA As Integer) As PROVIDERRow
            Dim rowPROVIDERRow As PROVIDERRow = CType(Me.NewRow,PROVIDERRow)
            Dim columnValuesArray() As Object = New Object() {ID, PROVIDER, MASKA}
            rowPROVIDERRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPROVIDERRow)
            Return rowPROVIDERRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PROVIDERDataTable = CType(MyBase.Clone,PROVIDERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PROVIDERDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPROVIDER = MyBase.Columns("PROVIDER")
            Me.columnMASKA = MyBase.Columns("MASKA")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPROVIDER = New Global.System.Data.DataColumn("PROVIDER", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVIDER)
            Me.columnMASKA = New Global.System.Data.DataColumn("MASKA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMASKA)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.Unique = true
            Me.columnPROVIDER.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPROVIDERRow() As PROVIDERRow
            Return CType(Me.NewRow,PROVIDERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PROVIDERRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PROVIDERRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PROVIDERRowChangedEvent) Is Nothing) Then
                RaiseEvent PROVIDERRowChanged(Me, New PROVIDERRowChangeEvent(CType(e.Row,PROVIDERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PROVIDERRowChangingEvent) Is Nothing) Then
                RaiseEvent PROVIDERRowChanging(Me, New PROVIDERRowChangeEvent(CType(e.Row,PROVIDERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PROVIDERRowDeletedEvent) Is Nothing) Then
                RaiseEvent PROVIDERRowDeleted(Me, New PROVIDERRowChangeEvent(CType(e.Row,PROVIDERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PROVIDERRowDeletingEvent) Is Nothing) Then
                RaiseEvent PROVIDERRowDeleting(Me, New PROVIDERRowChangeEvent(CType(e.Row,PROVIDERRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePROVIDERRow(ByVal row As PROVIDERRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PROVIDERDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SLOVNIKDataTable
        Inherits Global.System.Data.TypedTableBase(Of SLOVNIKRow)
        
        Private columnSLOVO As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SLOVNIK"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SLOVOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSLOVO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SLOVNIKRow
            Get
                Return CType(Me.Rows(index),SLOVNIKRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SLOVNIKRowChanging As SLOVNIKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SLOVNIKRowChanged As SLOVNIKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SLOVNIKRowDeleting As SLOVNIKRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event SLOVNIKRowDeleted As SLOVNIKRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddSLOVNIKRow(ByVal row As SLOVNIKRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddSLOVNIKRow(ByVal SLOVO As String) As SLOVNIKRow
            Dim rowSLOVNIKRow As SLOVNIKRow = CType(Me.NewRow,SLOVNIKRow)
            Dim columnValuesArray() As Object = New Object() {SLOVO}
            rowSLOVNIKRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowSLOVNIKRow)
            Return rowSLOVNIKRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As SLOVNIKDataTable = CType(MyBase.Clone,SLOVNIKDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New SLOVNIKDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnSLOVO = MyBase.Columns("SLOVO")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnSLOVO = New Global.System.Data.DataColumn("SLOVO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSLOVO)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSLOVO}, false))
            Me.columnSLOVO.Unique = true
            Me.columnSLOVO.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewSLOVNIKRow() As SLOVNIKRow
            Return CType(Me.NewRow,SLOVNIKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New SLOVNIKRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(SLOVNIKRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SLOVNIKRowChangedEvent) Is Nothing) Then
                RaiseEvent SLOVNIKRowChanged(Me, New SLOVNIKRowChangeEvent(CType(e.Row,SLOVNIKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SLOVNIKRowChangingEvent) Is Nothing) Then
                RaiseEvent SLOVNIKRowChanging(Me, New SLOVNIKRowChangeEvent(CType(e.Row,SLOVNIKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SLOVNIKRowDeletedEvent) Is Nothing) Then
                RaiseEvent SLOVNIKRowDeleted(Me, New SLOVNIKRowChangeEvent(CType(e.Row,SLOVNIKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SLOVNIKRowDeletingEvent) Is Nothing) Then
                RaiseEvent SLOVNIKRowDeleting(Me, New SLOVNIKRowChangeEvent(CType(e.Row,SLOVNIKRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveSLOVNIKRow(ByVal row As SLOVNIKRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SLOVNIKDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TBINDataTable
        Inherits Global.System.Data.TypedTableBase(Of TBINRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnID_MISTO As Global.System.Data.DataColumn
        
        Private columnID_AUTOR As Global.System.Data.DataColumn
        
        Private columnID_AUTOR2 As Global.System.Data.DataColumn
        
        Private columnID_ZAVAZNOST As Global.System.Data.DataColumn
        
        Private columnID_TYP As Global.System.Data.DataColumn
        
        Private columnEXCHANGES1 As Global.System.Data.DataColumn
        
        Private columnEXCHANGES2 As Global.System.Data.DataColumn
        
        Private columnPROVIDER As Global.System.Data.DataColumn
        
        Private columnZADANO As Global.System.Data.DataColumn
        
        Private columnZADANO_DB As Global.System.Data.DataColumn
        
        Private columnOD_KDY As Global.System.Data.DataColumn
        
        Private columnDO_KDY As Global.System.Data.DataColumn
        
        Private columnSMAZANO As Global.System.Data.DataColumn
        
        Private columnPREDMET As Global.System.Data.DataColumn
        
        Private columnTEXT As Global.System.Data.DataColumn
        
        Private columnHISTORIE As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TBIN"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_MISTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MISTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_AUTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AUTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_AUTOR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AUTOR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_ZAVAZNOSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ZAVAZNOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_TYPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_TYP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCHANGES1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCHANGES1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCHANGES2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCHANGES2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROVIDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVIDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZADANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZADANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZADANO_DBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZADANO_DB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OD_KDYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOD_KDY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DO_KDYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDO_KDY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SMAZANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSMAZANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PREDMETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDMET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HISTORIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHISTORIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TBINRow
            Get
                Return CType(Me.Rows(index),TBINRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TBINRowChanging As TBINRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TBINRowChanged As TBINRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TBINRowDeleting As TBINRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TBINRowDeleted As TBINRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTBINRow(ByVal row As TBINRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTBINRow( _
                    ByVal ID As Integer,  _
                    ByVal parentMISTARowByINTEG_59 As MISTARow,  _
                    ByVal parentAUTORIRowByINTEG_60 As AUTORIRow,  _
                    ByVal parentAUTORIRowByTBIN_FK_AUTOR2 As AUTORIRow,  _
                    ByVal parentZAVAZNOSTIRowByINTEG_61 As ZAVAZNOSTIRow,  _
                    ByVal parentTYPYRowByINTEG_62 As TYPYRow,  _
                    ByVal EXCHANGES1 As Integer,  _
                    ByVal EXCHANGES2 As Integer,  _
                    ByVal PROVIDER As Integer,  _
                    ByVal ZADANO As Date,  _
                    ByVal ZADANO_DB As Date,  _
                    ByVal OD_KDY As Date,  _
                    ByVal DO_KDY As Date,  _
                    ByVal SMAZANO As Date,  _
                    ByVal PREDMET As String,  _
                    ByVal TEXT As String,  _
                    ByVal HISTORIE As String) As TBINRow
            Dim rowTBINRow As TBINRow = CType(Me.NewRow,TBINRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, Nothing, Nothing, Nothing, Nothing, EXCHANGES1, EXCHANGES2, PROVIDER, ZADANO, ZADANO_DB, OD_KDY, DO_KDY, SMAZANO, PREDMET, TEXT, HISTORIE}
            If (Not (parentMISTARowByINTEG_59) Is Nothing) Then
                columnValuesArray(1) = parentMISTARowByINTEG_59(0)
            End If
            If (Not (parentAUTORIRowByINTEG_60) Is Nothing) Then
                columnValuesArray(2) = parentAUTORIRowByINTEG_60(0)
            End If
            If (Not (parentAUTORIRowByTBIN_FK_AUTOR2) Is Nothing) Then
                columnValuesArray(3) = parentAUTORIRowByTBIN_FK_AUTOR2(0)
            End If
            If (Not (parentZAVAZNOSTIRowByINTEG_61) Is Nothing) Then
                columnValuesArray(4) = parentZAVAZNOSTIRowByINTEG_61(0)
            End If
            If (Not (parentTYPYRowByINTEG_62) Is Nothing) Then
                columnValuesArray(5) = parentTYPYRowByINTEG_62(0)
            End If
            rowTBINRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTBINRow)
            Return rowTBINRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TBINDataTable = CType(MyBase.Clone,TBINDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TBINDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnID_MISTO = MyBase.Columns("ID_MISTO")
            Me.columnID_AUTOR = MyBase.Columns("ID_AUTOR")
            Me.columnID_AUTOR2 = MyBase.Columns("ID_AUTOR2")
            Me.columnID_ZAVAZNOST = MyBase.Columns("ID_ZAVAZNOST")
            Me.columnID_TYP = MyBase.Columns("ID_TYP")
            Me.columnEXCHANGES1 = MyBase.Columns("EXCHANGES1")
            Me.columnEXCHANGES2 = MyBase.Columns("EXCHANGES2")
            Me.columnPROVIDER = MyBase.Columns("PROVIDER")
            Me.columnZADANO = MyBase.Columns("ZADANO")
            Me.columnZADANO_DB = MyBase.Columns("ZADANO_DB")
            Me.columnOD_KDY = MyBase.Columns("OD_KDY")
            Me.columnDO_KDY = MyBase.Columns("DO_KDY")
            Me.columnSMAZANO = MyBase.Columns("SMAZANO")
            Me.columnPREDMET = MyBase.Columns("PREDMET")
            Me.columnTEXT = MyBase.Columns("TEXT")
            Me.columnHISTORIE = MyBase.Columns("HISTORIE")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnID_MISTO = New Global.System.Data.DataColumn("ID_MISTO", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MISTO)
            Me.columnID_AUTOR = New Global.System.Data.DataColumn("ID_AUTOR", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AUTOR)
            Me.columnID_AUTOR2 = New Global.System.Data.DataColumn("ID_AUTOR2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AUTOR2)
            Me.columnID_ZAVAZNOST = New Global.System.Data.DataColumn("ID_ZAVAZNOST", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ZAVAZNOST)
            Me.columnID_TYP = New Global.System.Data.DataColumn("ID_TYP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TYP)
            Me.columnEXCHANGES1 = New Global.System.Data.DataColumn("EXCHANGES1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCHANGES1)
            Me.columnEXCHANGES2 = New Global.System.Data.DataColumn("EXCHANGES2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCHANGES2)
            Me.columnPROVIDER = New Global.System.Data.DataColumn("PROVIDER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVIDER)
            Me.columnZADANO = New Global.System.Data.DataColumn("ZADANO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZADANO)
            Me.columnZADANO_DB = New Global.System.Data.DataColumn("ZADANO_DB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZADANO_DB)
            Me.columnOD_KDY = New Global.System.Data.DataColumn("OD_KDY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOD_KDY)
            Me.columnDO_KDY = New Global.System.Data.DataColumn("DO_KDY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDO_KDY)
            Me.columnSMAZANO = New Global.System.Data.DataColumn("SMAZANO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSMAZANO)
            Me.columnPREDMET = New Global.System.Data.DataColumn("PREDMET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDMET)
            Me.columnTEXT = New Global.System.Data.DataColumn("TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXT)
            Me.columnHISTORIE = New Global.System.Data.DataColumn("HISTORIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHISTORIE)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.Unique = true
            Me.columnPREDMET.MaxLength = 255
            Me.columnTEXT.MaxLength = 2147483647
            Me.columnHISTORIE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTBINRow() As TBINRow
            Return CType(Me.NewRow,TBINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TBINRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TBINRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TBINRowChangedEvent) Is Nothing) Then
                RaiseEvent TBINRowChanged(Me, New TBINRowChangeEvent(CType(e.Row,TBINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TBINRowChangingEvent) Is Nothing) Then
                RaiseEvent TBINRowChanging(Me, New TBINRowChangeEvent(CType(e.Row,TBINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TBINRowDeletedEvent) Is Nothing) Then
                RaiseEvent TBINRowDeleted(Me, New TBINRowChangeEvent(CType(e.Row,TBINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TBINRowDeletingEvent) Is Nothing) Then
                RaiseEvent TBINRowDeleting(Me, New TBINRowChangeEvent(CType(e.Row,TBINRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTBINRow(ByVal row As TBINRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TBINDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TYPYDataTable
        Inherits Global.System.Data.TypedTableBase(Of TYPYRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnTYP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TYPY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TYPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTYP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TYPYRow
            Get
                Return CType(Me.Rows(index),TYPYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TYPYRowChanging As TYPYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TYPYRowChanged As TYPYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TYPYRowDeleting As TYPYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event TYPYRowDeleted As TYPYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddTYPYRow(ByVal row As TYPYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddTYPYRow(ByVal ID As Short, ByVal TYP As String) As TYPYRow
            Dim rowTYPYRow As TYPYRow = CType(Me.NewRow,TYPYRow)
            Dim columnValuesArray() As Object = New Object() {ID, TYP}
            rowTYPYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTYPYRow)
            Return rowTYPYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TYPYDataTable = CType(MyBase.Clone,TYPYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TYPYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnTYP = MyBase.Columns("TYP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnTYP = New Global.System.Data.DataColumn("TYP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTYP)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.Unique = true
            Me.columnTYP.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewTYPYRow() As TYPYRow
            Return CType(Me.NewRow,TYPYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TYPYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TYPYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TYPYRowChangedEvent) Is Nothing) Then
                RaiseEvent TYPYRowChanged(Me, New TYPYRowChangeEvent(CType(e.Row,TYPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TYPYRowChangingEvent) Is Nothing) Then
                RaiseEvent TYPYRowChanging(Me, New TYPYRowChangeEvent(CType(e.Row,TYPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TYPYRowDeletedEvent) Is Nothing) Then
                RaiseEvent TYPYRowDeleted(Me, New TYPYRowChangeEvent(CType(e.Row,TYPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TYPYRowDeletingEvent) Is Nothing) Then
                RaiseEvent TYPYRowDeleting(Me, New TYPYRowChangeEvent(CType(e.Row,TYPYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveTYPYRow(ByVal row As TYPYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TYPYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class USTREDNYDataTable
        Inherits Global.System.Data.TypedTableBase(Of USTREDNYRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnID_MISTO As Global.System.Data.DataColumn
        
        Private columnUSTREDNA As Global.System.Data.DataColumn
        
        Private columnPOPIS As Global.System.Data.DataColumn
        
        Private columnMASKA As Global.System.Data.DataColumn
        
        Private columnBLOK_USTREDEN As Global.System.Data.DataColumn
        
        Private columnID_PROVIDER As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "USTREDNY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_MISTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MISTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property USTREDNAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUSTREDNA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property POPISColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPOPIS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property MASKAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMASKA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property BLOK_USTREDENColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBLOK_USTREDEN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_PROVIDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_PROVIDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As USTREDNYRow
            Get
                Return CType(Me.Rows(index),USTREDNYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USTREDNYRowChanging As USTREDNYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USTREDNYRowChanged As USTREDNYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USTREDNYRowDeleting As USTREDNYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event USTREDNYRowDeleted As USTREDNYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddUSTREDNYRow(ByVal row As USTREDNYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddUSTREDNYRow(ByVal ID As Integer, ByVal ID_MISTO As Short, ByVal USTREDNA As String, ByVal POPIS As String, ByVal MASKA As Integer, ByVal BLOK_USTREDEN As Short, ByVal ID_PROVIDER As Short) As USTREDNYRow
            Dim rowUSTREDNYRow As USTREDNYRow = CType(Me.NewRow,USTREDNYRow)
            Dim columnValuesArray() As Object = New Object() {ID, ID_MISTO, USTREDNA, POPIS, MASKA, BLOK_USTREDEN, ID_PROVIDER}
            rowUSTREDNYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUSTREDNYRow)
            Return rowUSTREDNYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As USTREDNYDataTable = CType(MyBase.Clone,USTREDNYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New USTREDNYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnID_MISTO = MyBase.Columns("ID_MISTO")
            Me.columnUSTREDNA = MyBase.Columns("USTREDNA")
            Me.columnPOPIS = MyBase.Columns("POPIS")
            Me.columnMASKA = MyBase.Columns("MASKA")
            Me.columnBLOK_USTREDEN = MyBase.Columns("BLOK_USTREDEN")
            Me.columnID_PROVIDER = MyBase.Columns("ID_PROVIDER")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnID_MISTO = New Global.System.Data.DataColumn("ID_MISTO", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MISTO)
            Me.columnUSTREDNA = New Global.System.Data.DataColumn("USTREDNA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUSTREDNA)
            Me.columnPOPIS = New Global.System.Data.DataColumn("POPIS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPOPIS)
            Me.columnMASKA = New Global.System.Data.DataColumn("MASKA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMASKA)
            Me.columnBLOK_USTREDEN = New Global.System.Data.DataColumn("BLOK_USTREDEN", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBLOK_USTREDEN)
            Me.columnID_PROVIDER = New Global.System.Data.DataColumn("ID_PROVIDER", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_PROVIDER)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.Unique = true
            Me.columnUSTREDNA.MaxLength = 10
            Me.columnPOPIS.MaxLength = 40
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewUSTREDNYRow() As USTREDNYRow
            Return CType(Me.NewRow,USTREDNYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New USTREDNYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(USTREDNYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.USTREDNYRowChangedEvent) Is Nothing) Then
                RaiseEvent USTREDNYRowChanged(Me, New USTREDNYRowChangeEvent(CType(e.Row,USTREDNYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.USTREDNYRowChangingEvent) Is Nothing) Then
                RaiseEvent USTREDNYRowChanging(Me, New USTREDNYRowChangeEvent(CType(e.Row,USTREDNYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.USTREDNYRowDeletedEvent) Is Nothing) Then
                RaiseEvent USTREDNYRowDeleted(Me, New USTREDNYRowChangeEvent(CType(e.Row,USTREDNYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.USTREDNYRowDeletingEvent) Is Nothing) Then
                RaiseEvent USTREDNYRowDeleting(Me, New USTREDNYRowChangeEvent(CType(e.Row,USTREDNYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveUSTREDNYRow(ByVal row As USTREDNYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "USTREDNYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZAMKYDataTable
        Inherits Global.System.Data.TypedTableBase(Of ZAMKYRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnID_ZAZNAMU As Global.System.Data.DataColumn
        
        Private columnKDO_POUZIVA As Global.System.Data.DataColumn
        
        Private columnCAS_ZAMKNUTI As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZAMKY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_ZAZNAMUColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ZAZNAMU
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KDO_POUZIVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKDO_POUZIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property CAS_ZAMKNUTIColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAS_ZAMKNUTI
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZAMKYRow
            Get
                Return CType(Me.Rows(index),ZAMKYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAMKYRowChanging As ZAMKYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAMKYRowChanged As ZAMKYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAMKYRowDeleting As ZAMKYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAMKYRowDeleted As ZAMKYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddZAMKYRow(ByVal row As ZAMKYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddZAMKYRow(ByVal ID As Integer, ByVal ID_ZAZNAMU As Integer, ByVal KDO_POUZIVA As Integer, ByVal CAS_ZAMKNUTI As Date) As ZAMKYRow
            Dim rowZAMKYRow As ZAMKYRow = CType(Me.NewRow,ZAMKYRow)
            Dim columnValuesArray() As Object = New Object() {ID, ID_ZAZNAMU, KDO_POUZIVA, CAS_ZAMKNUTI}
            rowZAMKYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowZAMKYRow)
            Return rowZAMKYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZAMKYDataTable = CType(MyBase.Clone,ZAMKYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZAMKYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnID_ZAZNAMU = MyBase.Columns("ID_ZAZNAMU")
            Me.columnKDO_POUZIVA = MyBase.Columns("KDO_POUZIVA")
            Me.columnCAS_ZAMKNUTI = MyBase.Columns("CAS_ZAMKNUTI")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnID_ZAZNAMU = New Global.System.Data.DataColumn("ID_ZAZNAMU", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ZAZNAMU)
            Me.columnKDO_POUZIVA = New Global.System.Data.DataColumn("KDO_POUZIVA", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKDO_POUZIVA)
            Me.columnCAS_ZAMKNUTI = New Global.System.Data.DataColumn("CAS_ZAMKNUTI", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAS_ZAMKNUTI)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewZAMKYRow() As ZAMKYRow
            Return CType(Me.NewRow,ZAMKYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZAMKYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZAMKYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZAMKYRowChangedEvent) Is Nothing) Then
                RaiseEvent ZAMKYRowChanged(Me, New ZAMKYRowChangeEvent(CType(e.Row,ZAMKYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZAMKYRowChangingEvent) Is Nothing) Then
                RaiseEvent ZAMKYRowChanging(Me, New ZAMKYRowChangeEvent(CType(e.Row,ZAMKYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZAMKYRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZAMKYRowDeleted(Me, New ZAMKYRowChangeEvent(CType(e.Row,ZAMKYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZAMKYRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZAMKYRowDeleting(Me, New ZAMKYRowChangeEvent(CType(e.Row,ZAMKYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveZAMKYRow(ByVal row As ZAMKYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZAMKYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZAVAZNOSTIDataTable
        Inherits Global.System.Data.TypedTableBase(Of ZAVAZNOSTIRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnZAVAZNOST As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZAVAZNOSTI"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZAVAZNOSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZAVAZNOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZAVAZNOSTIRow
            Get
                Return CType(Me.Rows(index),ZAVAZNOSTIRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAVAZNOSTIRowChanging As ZAVAZNOSTIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAVAZNOSTIRowChanged As ZAVAZNOSTIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAVAZNOSTIRowDeleting As ZAVAZNOSTIRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAVAZNOSTIRowDeleted As ZAVAZNOSTIRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddZAVAZNOSTIRow(ByVal row As ZAVAZNOSTIRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddZAVAZNOSTIRow(ByVal ID As Short, ByVal ZAVAZNOST As String) As ZAVAZNOSTIRow
            Dim rowZAVAZNOSTIRow As ZAVAZNOSTIRow = CType(Me.NewRow,ZAVAZNOSTIRow)
            Dim columnValuesArray() As Object = New Object() {ID, ZAVAZNOST}
            rowZAVAZNOSTIRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowZAVAZNOSTIRow)
            Return rowZAVAZNOSTIRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZAVAZNOSTIDataTable = CType(MyBase.Clone,ZAVAZNOSTIDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZAVAZNOSTIDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnZAVAZNOST = MyBase.Columns("ZAVAZNOST")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnZAVAZNOST = New Global.System.Data.DataColumn("ZAVAZNOST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZAVAZNOST)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.Unique = true
            Me.columnZAVAZNOST.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewZAVAZNOSTIRow() As ZAVAZNOSTIRow
            Return CType(Me.NewRow,ZAVAZNOSTIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZAVAZNOSTIRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZAVAZNOSTIRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZAVAZNOSTIRowChangedEvent) Is Nothing) Then
                RaiseEvent ZAVAZNOSTIRowChanged(Me, New ZAVAZNOSTIRowChangeEvent(CType(e.Row,ZAVAZNOSTIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZAVAZNOSTIRowChangingEvent) Is Nothing) Then
                RaiseEvent ZAVAZNOSTIRowChanging(Me, New ZAVAZNOSTIRowChangeEvent(CType(e.Row,ZAVAZNOSTIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZAVAZNOSTIRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZAVAZNOSTIRowDeleted(Me, New ZAVAZNOSTIRowChangeEvent(CType(e.Row,ZAVAZNOSTIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZAVAZNOSTIRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZAVAZNOSTIRowDeleting(Me, New ZAVAZNOSTIRowChangeEvent(CType(e.Row,ZAVAZNOSTIRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveZAVAZNOSTIRow(ByVal row As ZAVAZNOSTIRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZAVAZNOSTIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ZAZNAMYDataTable
        Inherits Global.System.Data.TypedTableBase(Of ZAZNAMYRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnID_MISTO As Global.System.Data.DataColumn
        
        Private columnID_AUTOR As Global.System.Data.DataColumn
        
        Private columnID_AUTOR2 As Global.System.Data.DataColumn
        
        Private columnID_ZAVAZNOST As Global.System.Data.DataColumn
        
        Private columnID_TYP As Global.System.Data.DataColumn
        
        Private columnEXCHANGES1 As Global.System.Data.DataColumn
        
        Private columnEXCHANGES2 As Global.System.Data.DataColumn
        
        Private columnPROVIDER As Global.System.Data.DataColumn
        
        Private columnZADANO As Global.System.Data.DataColumn
        
        Private columnZADANO_DB As Global.System.Data.DataColumn
        
        Private columnOD_KDY As Global.System.Data.DataColumn
        
        Private columnDO_KDY As Global.System.Data.DataColumn
        
        Private columnPREDMET As Global.System.Data.DataColumn
        
        Private columnTEXT As Global.System.Data.DataColumn
        
        Private columnHISTORIE As Global.System.Data.DataColumn
        
        Private columnNEM_CAS_ZAD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ZAZNAMY"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_MISTOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_MISTO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_AUTORColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AUTOR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_AUTOR2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_AUTOR2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_ZAVAZNOSTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_ZAVAZNOST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ID_TYPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID_TYP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCHANGES1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCHANGES1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property EXCHANGES2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnEXCHANGES2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PROVIDERColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROVIDER
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZADANOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZADANO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property ZADANO_DBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZADANO_DB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OD_KDYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOD_KDY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property DO_KDYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDO_KDY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PREDMETColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREDMET
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TEXTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTEXT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property HISTORIEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHISTORIE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property NEM_CAS_ZADColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEM_CAS_ZAD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ZAZNAMYRow
            Get
                Return CType(Me.Rows(index),ZAZNAMYRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAZNAMYRowChanging As ZAZNAMYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAZNAMYRowChanged As ZAZNAMYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAZNAMYRowDeleting As ZAZNAMYRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event ZAZNAMYRowDeleted As ZAZNAMYRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddZAZNAMYRow(ByVal row As ZAZNAMYRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddZAZNAMYRow( _
                    ByVal ID As Integer,  _
                    ByVal parentMISTARowByINTEG_26 As MISTARow,  _
                    ByVal parentAUTORIRowByINTEG_27 As AUTORIRow,  _
                    ByVal parentAUTORIRowByFK_AUTOR2 As AUTORIRow,  _
                    ByVal parentZAVAZNOSTIRowByINTEG_28 As ZAVAZNOSTIRow,  _
                    ByVal parentTYPYRowByINTEG_33 As TYPYRow,  _
                    ByVal EXCHANGES1 As Integer,  _
                    ByVal EXCHANGES2 As Integer,  _
                    ByVal PROVIDER As Integer,  _
                    ByVal ZADANO As Date,  _
                    ByVal ZADANO_DB As Date,  _
                    ByVal OD_KDY As Date,  _
                    ByVal DO_KDY As Date,  _
                    ByVal PREDMET As String,  _
                    ByVal TEXT As String,  _
                    ByVal HISTORIE As String,  _
                    ByVal NEM_CAS_ZAD As Short) As ZAZNAMYRow
            Dim rowZAZNAMYRow As ZAZNAMYRow = CType(Me.NewRow,ZAZNAMYRow)
            Dim columnValuesArray() As Object = New Object() {ID, Nothing, Nothing, Nothing, Nothing, Nothing, EXCHANGES1, EXCHANGES2, PROVIDER, ZADANO, ZADANO_DB, OD_KDY, DO_KDY, PREDMET, TEXT, HISTORIE, NEM_CAS_ZAD}
            If (Not (parentMISTARowByINTEG_26) Is Nothing) Then
                columnValuesArray(1) = parentMISTARowByINTEG_26(0)
            End If
            If (Not (parentAUTORIRowByINTEG_27) Is Nothing) Then
                columnValuesArray(2) = parentAUTORIRowByINTEG_27(0)
            End If
            If (Not (parentAUTORIRowByFK_AUTOR2) Is Nothing) Then
                columnValuesArray(3) = parentAUTORIRowByFK_AUTOR2(0)
            End If
            If (Not (parentZAVAZNOSTIRowByINTEG_28) Is Nothing) Then
                columnValuesArray(4) = parentZAVAZNOSTIRowByINTEG_28(0)
            End If
            If (Not (parentTYPYRowByINTEG_33) Is Nothing) Then
                columnValuesArray(5) = parentTYPYRowByINTEG_33(0)
            End If
            rowZAZNAMYRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowZAZNAMYRow)
            Return rowZAZNAMYRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ZAZNAMYDataTable = CType(MyBase.Clone,ZAZNAMYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ZAZNAMYDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnID_MISTO = MyBase.Columns("ID_MISTO")
            Me.columnID_AUTOR = MyBase.Columns("ID_AUTOR")
            Me.columnID_AUTOR2 = MyBase.Columns("ID_AUTOR2")
            Me.columnID_ZAVAZNOST = MyBase.Columns("ID_ZAVAZNOST")
            Me.columnID_TYP = MyBase.Columns("ID_TYP")
            Me.columnEXCHANGES1 = MyBase.Columns("EXCHANGES1")
            Me.columnEXCHANGES2 = MyBase.Columns("EXCHANGES2")
            Me.columnPROVIDER = MyBase.Columns("PROVIDER")
            Me.columnZADANO = MyBase.Columns("ZADANO")
            Me.columnZADANO_DB = MyBase.Columns("ZADANO_DB")
            Me.columnOD_KDY = MyBase.Columns("OD_KDY")
            Me.columnDO_KDY = MyBase.Columns("DO_KDY")
            Me.columnPREDMET = MyBase.Columns("PREDMET")
            Me.columnTEXT = MyBase.Columns("TEXT")
            Me.columnHISTORIE = MyBase.Columns("HISTORIE")
            Me.columnNEM_CAS_ZAD = MyBase.Columns("NEM_CAS_ZAD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnID_MISTO = New Global.System.Data.DataColumn("ID_MISTO", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_MISTO)
            Me.columnID_AUTOR = New Global.System.Data.DataColumn("ID_AUTOR", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AUTOR)
            Me.columnID_AUTOR2 = New Global.System.Data.DataColumn("ID_AUTOR2", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_AUTOR2)
            Me.columnID_ZAVAZNOST = New Global.System.Data.DataColumn("ID_ZAVAZNOST", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_ZAVAZNOST)
            Me.columnID_TYP = New Global.System.Data.DataColumn("ID_TYP", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID_TYP)
            Me.columnEXCHANGES1 = New Global.System.Data.DataColumn("EXCHANGES1", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCHANGES1)
            Me.columnEXCHANGES2 = New Global.System.Data.DataColumn("EXCHANGES2", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEXCHANGES2)
            Me.columnPROVIDER = New Global.System.Data.DataColumn("PROVIDER", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROVIDER)
            Me.columnZADANO = New Global.System.Data.DataColumn("ZADANO", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZADANO)
            Me.columnZADANO_DB = New Global.System.Data.DataColumn("ZADANO_DB", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZADANO_DB)
            Me.columnOD_KDY = New Global.System.Data.DataColumn("OD_KDY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOD_KDY)
            Me.columnDO_KDY = New Global.System.Data.DataColumn("DO_KDY", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDO_KDY)
            Me.columnPREDMET = New Global.System.Data.DataColumn("PREDMET", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREDMET)
            Me.columnTEXT = New Global.System.Data.DataColumn("TEXT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTEXT)
            Me.columnHISTORIE = New Global.System.Data.DataColumn("HISTORIE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHISTORIE)
            Me.columnNEM_CAS_ZAD = New Global.System.Data.DataColumn("NEM_CAS_ZAD", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEM_CAS_ZAD)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, false))
            Me.columnID.Unique = true
            Me.columnPREDMET.MaxLength = 255
            Me.columnTEXT.MaxLength = 2147483647
            Me.columnHISTORIE.MaxLength = 2147483647
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewZAZNAMYRow() As ZAZNAMYRow
            Return CType(Me.NewRow,ZAZNAMYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ZAZNAMYRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ZAZNAMYRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ZAZNAMYRowChangedEvent) Is Nothing) Then
                RaiseEvent ZAZNAMYRowChanged(Me, New ZAZNAMYRowChangeEvent(CType(e.Row,ZAZNAMYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ZAZNAMYRowChangingEvent) Is Nothing) Then
                RaiseEvent ZAZNAMYRowChanging(Me, New ZAZNAMYRowChangeEvent(CType(e.Row,ZAZNAMYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ZAZNAMYRowDeletedEvent) Is Nothing) Then
                RaiseEvent ZAZNAMYRowDeleted(Me, New ZAZNAMYRowChangeEvent(CType(e.Row,ZAZNAMYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ZAZNAMYRowDeletingEvent) Is Nothing) Then
                RaiseEvent ZAZNAMYRowDeleting(Me, New ZAZNAMYRowChangeEvent(CType(e.Row,ZAZNAMYRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemoveZAZNAMYRow(ByVal row As ZAZNAMYRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ZAZNAMYDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PS_ZAZ_ADDDataTable
        Inherits Global.System.Data.TypedTableBase(Of PS_ZAZ_ADDRow)
        
        Private columnOK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PS_ZAZ_ADD"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PS_ZAZ_ADDRow
            Get
                Return CType(Me.Rows(index),PS_ZAZ_ADDRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PS_ZAZ_ADDRowChanging As PS_ZAZ_ADDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PS_ZAZ_ADDRowChanged As PS_ZAZ_ADDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PS_ZAZ_ADDRowDeleting As PS_ZAZ_ADDRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PS_ZAZ_ADDRowDeleted As PS_ZAZ_ADDRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPS_ZAZ_ADDRow(ByVal row As PS_ZAZ_ADDRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPS_ZAZ_ADDRow(ByVal OK As Short) As PS_ZAZ_ADDRow
            Dim rowPS_ZAZ_ADDRow As PS_ZAZ_ADDRow = CType(Me.NewRow,PS_ZAZ_ADDRow)
            Dim columnValuesArray() As Object = New Object() {OK}
            rowPS_ZAZ_ADDRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPS_ZAZ_ADDRow)
            Return rowPS_ZAZ_ADDRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PS_ZAZ_ADDDataTable = CType(MyBase.Clone,PS_ZAZ_ADDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PS_ZAZ_ADDDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnOK = MyBase.Columns("OK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnOK = New Global.System.Data.DataColumn("OK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOK)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPS_ZAZ_ADDRow() As PS_ZAZ_ADDRow
            Return CType(Me.NewRow,PS_ZAZ_ADDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PS_ZAZ_ADDRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PS_ZAZ_ADDRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PS_ZAZ_ADDRowChangedEvent) Is Nothing) Then
                RaiseEvent PS_ZAZ_ADDRowChanged(Me, New PS_ZAZ_ADDRowChangeEvent(CType(e.Row,PS_ZAZ_ADDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PS_ZAZ_ADDRowChangingEvent) Is Nothing) Then
                RaiseEvent PS_ZAZ_ADDRowChanging(Me, New PS_ZAZ_ADDRowChangeEvent(CType(e.Row,PS_ZAZ_ADDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PS_ZAZ_ADDRowDeletedEvent) Is Nothing) Then
                RaiseEvent PS_ZAZ_ADDRowDeleted(Me, New PS_ZAZ_ADDRowChangeEvent(CType(e.Row,PS_ZAZ_ADDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PS_ZAZ_ADDRowDeletingEvent) Is Nothing) Then
                RaiseEvent PS_ZAZ_ADDRowDeleting(Me, New PS_ZAZ_ADDRowChangeEvent(CType(e.Row,PS_ZAZ_ADDRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePS_ZAZ_ADDRow(ByVal row As PS_ZAZ_ADDRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PS_ZAZ_ADDDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PS_ZAZ_ADD_NEWDataTable
        Inherits Global.System.Data.TypedTableBase(Of PS_ZAZ_ADD_NEWRow)
        
        Private columnOK As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PS_ZAZ_ADD_NEW"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property OKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PS_ZAZ_ADD_NEWRow
            Get
                Return CType(Me.Rows(index),PS_ZAZ_ADD_NEWRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PS_ZAZ_ADD_NEWRowChanging As PS_ZAZ_ADD_NEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PS_ZAZ_ADD_NEWRowChanged As PS_ZAZ_ADD_NEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PS_ZAZ_ADD_NEWRowDeleting As PS_ZAZ_ADD_NEWRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event PS_ZAZ_ADD_NEWRowDeleted As PS_ZAZ_ADD_NEWRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddPS_ZAZ_ADD_NEWRow(ByVal row As PS_ZAZ_ADD_NEWRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddPS_ZAZ_ADD_NEWRow(ByVal OK As Short) As PS_ZAZ_ADD_NEWRow
            Dim rowPS_ZAZ_ADD_NEWRow As PS_ZAZ_ADD_NEWRow = CType(Me.NewRow,PS_ZAZ_ADD_NEWRow)
            Dim columnValuesArray() As Object = New Object() {OK}
            rowPS_ZAZ_ADD_NEWRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowPS_ZAZ_ADD_NEWRow)
            Return rowPS_ZAZ_ADD_NEWRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As PS_ZAZ_ADD_NEWDataTable = CType(MyBase.Clone,PS_ZAZ_ADD_NEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New PS_ZAZ_ADD_NEWDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnOK = MyBase.Columns("OK")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnOK = New Global.System.Data.DataColumn("OK", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOK)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewPS_ZAZ_ADD_NEWRow() As PS_ZAZ_ADD_NEWRow
            Return CType(Me.NewRow,PS_ZAZ_ADD_NEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New PS_ZAZ_ADD_NEWRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(PS_ZAZ_ADD_NEWRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PS_ZAZ_ADD_NEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PS_ZAZ_ADD_NEWRowChanged(Me, New PS_ZAZ_ADD_NEWRowChangeEvent(CType(e.Row,PS_ZAZ_ADD_NEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PS_ZAZ_ADD_NEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PS_ZAZ_ADD_NEWRowChanging(Me, New PS_ZAZ_ADD_NEWRowChangeEvent(CType(e.Row,PS_ZAZ_ADD_NEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PS_ZAZ_ADD_NEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PS_ZAZ_ADD_NEWRowDeleted(Me, New PS_ZAZ_ADD_NEWRowChangeEvent(CType(e.Row,PS_ZAZ_ADD_NEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PS_ZAZ_ADD_NEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PS_ZAZ_ADD_NEWRowDeleting(Me, New PS_ZAZ_ADD_NEWRowChangeEvent(CType(e.Row,PS_ZAZ_ADD_NEWRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovePS_ZAZ_ADD_NEWRow(ByVal row As PS_ZAZ_ADD_NEWRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As DataSetEden = New DataSetEden()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PS_ZAZ_ADD_NEWDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class AUTORIRow
        Inherits Global.System.Data.DataRow
        
        Private tableAUTORI As AUTORIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAUTORI = CType(Me.Table,AUTORIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableAUTORI.IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'AUTORI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUTORI.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AUTOR() As String
            Get
                Try 
                    Return CType(Me(Me.tableAUTORI.AUTORColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AUTOR' in table 'AUTORI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUTORI.AUTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TELEFON() As String
            Get
                Try 
                    Return CType(Me(Me.tableAUTORI.TELEFONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TELEFON' in table 'AUTORI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUTORI.TELEFONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MOBIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableAUTORI.MOBILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MOBIL' in table 'AUTORI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUTORI.MOBILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HESLO() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAUTORI.HESLOColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HESLO' in table 'AUTORI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUTORI.HESLOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property POCET() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAUTORI.POCETColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POCET' in table 'AUTORI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUTORI.POCETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HODNOST() As Short
            Get
                Try 
                    Return CType(Me(Me.tableAUTORI.HODNOSTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HODNOST' in table 'AUTORI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAUTORI.HODNOSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableAUTORI.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableAUTORI.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsAUTORNull() As Boolean
            Return Me.IsNull(Me.tableAUTORI.AUTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetAUTORNull()
            Me(Me.tableAUTORI.AUTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTELEFONNull() As Boolean
            Return Me.IsNull(Me.tableAUTORI.TELEFONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTELEFONNull()
            Me(Me.tableAUTORI.TELEFONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMOBILNull() As Boolean
            Return Me.IsNull(Me.tableAUTORI.MOBILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMOBILNull()
            Me(Me.tableAUTORI.MOBILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHESLONull() As Boolean
            Return Me.IsNull(Me.tableAUTORI.HESLOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHESLONull()
            Me(Me.tableAUTORI.HESLOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPOCETNull() As Boolean
            Return Me.IsNull(Me.tableAUTORI.POCETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPOCETNull()
            Me(Me.tableAUTORI.POCETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHODNOSTNull() As Boolean
            Return Me.IsNull(Me.tableAUTORI.HODNOSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHODNOSTNull()
            Me(Me.tableAUTORI.HODNOSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTBINRowsByINTEG_60() As TBINRow()
            If (Me.Table.ChildRelations("INTEG_60") Is Nothing) Then
                Return New TBINRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INTEG_60")),TBINRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTBINRowsByTBIN_FK_AUTOR2() As TBINRow()
            If (Me.Table.ChildRelations("TBIN_FK_AUTOR2") Is Nothing) Then
                Return New TBINRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TBIN_FK_AUTOR2")),TBINRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetZAZNAMYRowsByFK_AUTOR2() As ZAZNAMYRow()
            If (Me.Table.ChildRelations("FK_AUTOR2") Is Nothing) Then
                Return New ZAZNAMYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_AUTOR2")),ZAZNAMYRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetZAZNAMYRowsByINTEG_27() As ZAZNAMYRow()
            If (Me.Table.ChildRelations("INTEG_27") Is Nothing) Then
                Return New ZAZNAMYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INTEG_27")),ZAZNAMYRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class MISTARow
        Inherits Global.System.Data.DataRow
        
        Private tableMISTA As MISTADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMISTA = CType(Me.Table,MISTADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMISTA.IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'MISTA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMISTA.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MISTO() As String
            Get
                Try 
                    Return CType(Me(Me.tableMISTA.MISTOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MISTO' in table 'MISTA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMISTA.MISTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TELEFON() As String
            Get
                Try 
                    Return CType(Me(Me.tableMISTA.TELEFONColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TELEFON' in table 'MISTA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMISTA.TELEFONColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MOBIL() As String
            Get
                Try 
                    Return CType(Me(Me.tableMISTA.MOBILColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MOBIL' in table 'MISTA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMISTA.MOBILColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property POCET() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMISTA.POCETColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POCET' in table 'MISTA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMISTA.POCETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HODNOST() As Short
            Get
                Try 
                    Return CType(Me(Me.tableMISTA.HODNOSTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HODNOST' in table 'MISTA' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMISTA.HODNOSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableMISTA.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableMISTA.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMISTONull() As Boolean
            Return Me.IsNull(Me.tableMISTA.MISTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMISTONull()
            Me(Me.tableMISTA.MISTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTELEFONNull() As Boolean
            Return Me.IsNull(Me.tableMISTA.TELEFONColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTELEFONNull()
            Me(Me.tableMISTA.TELEFONColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMOBILNull() As Boolean
            Return Me.IsNull(Me.tableMISTA.MOBILColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMOBILNull()
            Me(Me.tableMISTA.MOBILColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPOCETNull() As Boolean
            Return Me.IsNull(Me.tableMISTA.POCETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPOCETNull()
            Me(Me.tableMISTA.POCETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHODNOSTNull() As Boolean
            Return Me.IsNull(Me.tableMISTA.HODNOSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHODNOSTNull()
            Me(Me.tableMISTA.HODNOSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTBINRows() As TBINRow()
            If (Me.Table.ChildRelations("INTEG_59") Is Nothing) Then
                Return New TBINRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INTEG_59")),TBINRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetZAZNAMYRows() As ZAZNAMYRow()
            If (Me.Table.ChildRelations("INTEG_26") Is Nothing) Then
                Return New ZAZNAMYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INTEG_26")),ZAZNAMYRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ODKAZYRow
        Inherits Global.System.Data.DataRow
        
        Private tableODKAZY As ODKAZYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableODKAZY = CType(Me.Table,ODKAZYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableODKAZY.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableODKAZY.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ODKAZ() As String
            Get
                Try 
                    Return CType(Me(Me.tableODKAZY.ODKAZColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ODKAZ' in table 'ODKAZY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODKAZY.ODKAZColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CESTA() As String
            Get
                Try 
                    Return CType(Me(Me.tableODKAZY.CESTAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CESTA' in table 'ODKAZY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableODKAZY.CESTAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsODKAZNull() As Boolean
            Return Me.IsNull(Me.tableODKAZY.ODKAZColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetODKAZNull()
            Me(Me.tableODKAZY.ODKAZColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCESTANull() As Boolean
            Return Me.IsNull(Me.tableODKAZY.CESTAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCESTANull()
            Me(Me.tableODKAZY.CESTAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PROVIDERRow
        Inherits Global.System.Data.DataRow
        
        Private tablePROVIDER As PROVIDERDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePROVIDER = CType(Me.Table,PROVIDERDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROVIDER.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'PROVIDER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVIDER.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROVIDER() As String
            Get
                Try 
                    Return CType(Me(Me.tablePROVIDER.PROVIDERColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROVIDER' in table 'PROVIDER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVIDER.PROVIDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MASKA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePROVIDER.MASKAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MASKA' in table 'PROVIDER' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePROVIDER.MASKAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tablePROVIDER.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tablePROVIDER.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROVIDERNull() As Boolean
            Return Me.IsNull(Me.tablePROVIDER.PROVIDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROVIDERNull()
            Me(Me.tablePROVIDER.PROVIDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMASKANull() As Boolean
            Return Me.IsNull(Me.tablePROVIDER.MASKAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMASKANull()
            Me(Me.tablePROVIDER.MASKAColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class SLOVNIKRow
        Inherits Global.System.Data.DataRow
        
        Private tableSLOVNIK As SLOVNIKDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSLOVNIK = CType(Me.Table,SLOVNIKDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SLOVO() As String
            Get
                Try 
                    Return CType(Me(Me.tableSLOVNIK.SLOVOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SLOVO' in table 'SLOVNIK' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSLOVNIK.SLOVOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSLOVONull() As Boolean
            Return Me.IsNull(Me.tableSLOVNIK.SLOVOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSLOVONull()
            Me(Me.tableSLOVNIK.SLOVOColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TBINRow
        Inherits Global.System.Data.DataRow
        
        Private tableTBIN As TBINDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTBIN = CType(Me.Table,TBINDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_MISTO() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.ID_MISTOColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_MISTO' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.ID_MISTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_AUTOR() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.ID_AUTORColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_AUTOR' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.ID_AUTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_AUTOR2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.ID_AUTOR2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_AUTOR2' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.ID_AUTOR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_ZAVAZNOST() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.ID_ZAVAZNOSTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_ZAVAZNOST' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.ID_ZAVAZNOSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_TYP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.ID_TYPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_TYP' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.ID_TYPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCHANGES1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.EXCHANGES1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCHANGES1' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.EXCHANGES1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCHANGES2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.EXCHANGES2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCHANGES2' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.EXCHANGES2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROVIDER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.PROVIDERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROVIDER' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.PROVIDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ZADANO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.ZADANOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZADANO' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.ZADANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ZADANO_DB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.ZADANO_DBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZADANO_DB' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.ZADANO_DBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OD_KDY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.OD_KDYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OD_KDY' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.OD_KDYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DO_KDY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.DO_KDYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DO_KDY' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.DO_KDYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SMAZANO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.SMAZANOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SMAZANO' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.SMAZANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PREDMET() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.PREDMETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PREDMET' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.PREDMETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXT' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HISTORIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableTBIN.HISTORIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HISTORIE' in table 'TBIN' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTBIN.HISTORIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MISTARow() As MISTARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INTEG_59")),MISTARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INTEG_59"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AUTORIRowByINTEG_60() As AUTORIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INTEG_60")),AUTORIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INTEG_60"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ZAVAZNOSTIRow() As ZAVAZNOSTIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INTEG_61")),ZAVAZNOSTIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INTEG_61"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TYPYRow() As TYPYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INTEG_62")),TYPYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INTEG_62"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AUTORIRowByTBIN_FK_AUTOR2() As AUTORIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TBIN_FK_AUTOR2")),AUTORIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TBIN_FK_AUTOR2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableTBIN.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_MISTONull() As Boolean
            Return Me.IsNull(Me.tableTBIN.ID_MISTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_MISTONull()
            Me(Me.tableTBIN.ID_MISTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_AUTORNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.ID_AUTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_AUTORNull()
            Me(Me.tableTBIN.ID_AUTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_AUTOR2Null() As Boolean
            Return Me.IsNull(Me.tableTBIN.ID_AUTOR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_AUTOR2Null()
            Me(Me.tableTBIN.ID_AUTOR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_ZAVAZNOSTNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.ID_ZAVAZNOSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_ZAVAZNOSTNull()
            Me(Me.tableTBIN.ID_ZAVAZNOSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_TYPNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.ID_TYPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_TYPNull()
            Me(Me.tableTBIN.ID_TYPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCHANGES1Null() As Boolean
            Return Me.IsNull(Me.tableTBIN.EXCHANGES1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCHANGES1Null()
            Me(Me.tableTBIN.EXCHANGES1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCHANGES2Null() As Boolean
            Return Me.IsNull(Me.tableTBIN.EXCHANGES2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCHANGES2Null()
            Me(Me.tableTBIN.EXCHANGES2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROVIDERNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.PROVIDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROVIDERNull()
            Me(Me.tableTBIN.PROVIDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZADANONull() As Boolean
            Return Me.IsNull(Me.tableTBIN.ZADANOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZADANONull()
            Me(Me.tableTBIN.ZADANOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZADANO_DBNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.ZADANO_DBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZADANO_DBNull()
            Me(Me.tableTBIN.ZADANO_DBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOD_KDYNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.OD_KDYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOD_KDYNull()
            Me(Me.tableTBIN.OD_KDYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDO_KDYNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.DO_KDYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDO_KDYNull()
            Me(Me.tableTBIN.DO_KDYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsSMAZANONull() As Boolean
            Return Me.IsNull(Me.tableTBIN.SMAZANOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetSMAZANONull()
            Me(Me.tableTBIN.SMAZANOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPREDMETNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.PREDMETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPREDMETNull()
            Me(Me.tableTBIN.PREDMETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTEXTNull() As Boolean
            Return Me.IsNull(Me.tableTBIN.TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTEXTNull()
            Me(Me.tableTBIN.TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHISTORIENull() As Boolean
            Return Me.IsNull(Me.tableTBIN.HISTORIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHISTORIENull()
            Me(Me.tableTBIN.HISTORIEColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class TYPYRow
        Inherits Global.System.Data.DataRow
        
        Private tableTYPY As TYPYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTYPY = CType(Me.Table,TYPYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTYPY.IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'TYPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTYPY.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TYP() As String
            Get
                Try 
                    Return CType(Me(Me.tableTYPY.TYPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TYP' in table 'TYPY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTYPY.TYPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableTYPY.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableTYPY.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTYPNull() As Boolean
            Return Me.IsNull(Me.tableTYPY.TYPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTYPNull()
            Me(Me.tableTYPY.TYPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTBINRows() As TBINRow()
            If (Me.Table.ChildRelations("INTEG_62") Is Nothing) Then
                Return New TBINRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INTEG_62")),TBINRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetZAZNAMYRows() As ZAZNAMYRow()
            If (Me.Table.ChildRelations("INTEG_33") Is Nothing) Then
                Return New ZAZNAMYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INTEG_33")),ZAZNAMYRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class USTREDNYRow
        Inherits Global.System.Data.DataRow
        
        Private tableUSTREDNY As USTREDNYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUSTREDNY = CType(Me.Table,USTREDNYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUSTREDNY.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'USTREDNY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSTREDNY.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_MISTO() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSTREDNY.ID_MISTOColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_MISTO' in table 'USTREDNY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSTREDNY.ID_MISTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property USTREDNA() As String
            Get
                Try 
                    Return CType(Me(Me.tableUSTREDNY.USTREDNAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'USTREDNA' in table 'USTREDNY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSTREDNY.USTREDNAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property POPIS() As String
            Get
                Try 
                    Return CType(Me(Me.tableUSTREDNY.POPISColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'POPIS' in table 'USTREDNY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSTREDNY.POPISColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MASKA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableUSTREDNY.MASKAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MASKA' in table 'USTREDNY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSTREDNY.MASKAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BLOK_USTREDEN() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSTREDNY.BLOK_USTREDENColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BLOK_USTREDEN' in table 'USTREDNY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSTREDNY.BLOK_USTREDENColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_PROVIDER() As Short
            Get
                Try 
                    Return CType(Me(Me.tableUSTREDNY.ID_PROVIDERColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_PROVIDER' in table 'USTREDNY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUSTREDNY.ID_PROVIDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableUSTREDNY.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableUSTREDNY.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_MISTONull() As Boolean
            Return Me.IsNull(Me.tableUSTREDNY.ID_MISTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_MISTONull()
            Me(Me.tableUSTREDNY.ID_MISTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsUSTREDNANull() As Boolean
            Return Me.IsNull(Me.tableUSTREDNY.USTREDNAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetUSTREDNANull()
            Me(Me.tableUSTREDNY.USTREDNAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPOPISNull() As Boolean
            Return Me.IsNull(Me.tableUSTREDNY.POPISColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPOPISNull()
            Me(Me.tableUSTREDNY.POPISColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsMASKANull() As Boolean
            Return Me.IsNull(Me.tableUSTREDNY.MASKAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetMASKANull()
            Me(Me.tableUSTREDNY.MASKAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsBLOK_USTREDENNull() As Boolean
            Return Me.IsNull(Me.tableUSTREDNY.BLOK_USTREDENColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetBLOK_USTREDENNull()
            Me(Me.tableUSTREDNY.BLOK_USTREDENColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_PROVIDERNull() As Boolean
            Return Me.IsNull(Me.tableUSTREDNY.ID_PROVIDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_PROVIDERNull()
            Me(Me.tableUSTREDNY.ID_PROVIDERColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZAMKYRow
        Inherits Global.System.Data.DataRow
        
        Private tableZAMKY As ZAMKYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZAMKY = CType(Me.Table,ZAMKYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZAMKY.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'ZAMKY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAMKY.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_ZAZNAMU() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZAMKY.ID_ZAZNAMUColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_ZAZNAMU' in table 'ZAMKY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAMKY.ID_ZAZNAMUColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KDO_POUZIVA() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZAMKY.KDO_POUZIVAColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'KDO_POUZIVA' in table 'ZAMKY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAMKY.KDO_POUZIVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property CAS_ZAMKNUTI() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZAMKY.CAS_ZAMKNUTIColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CAS_ZAMKNUTI' in table 'ZAMKY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAMKY.CAS_ZAMKNUTIColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableZAMKY.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableZAMKY.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_ZAZNAMUNull() As Boolean
            Return Me.IsNull(Me.tableZAMKY.ID_ZAZNAMUColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_ZAZNAMUNull()
            Me(Me.tableZAMKY.ID_ZAZNAMUColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsKDO_POUZIVANull() As Boolean
            Return Me.IsNull(Me.tableZAMKY.KDO_POUZIVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetKDO_POUZIVANull()
            Me(Me.tableZAMKY.KDO_POUZIVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsCAS_ZAMKNUTINull() As Boolean
            Return Me.IsNull(Me.tableZAMKY.CAS_ZAMKNUTIColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetCAS_ZAMKNUTINull()
            Me(Me.tableZAMKY.CAS_ZAMKNUTIColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZAVAZNOSTIRow
        Inherits Global.System.Data.DataRow
        
        Private tableZAVAZNOSTI As ZAVAZNOSTIDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZAVAZNOSTI = CType(Me.Table,ZAVAZNOSTIDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZAVAZNOSTI.IDColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'ZAVAZNOSTI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAVAZNOSTI.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ZAVAZNOST() As String
            Get
                Try 
                    Return CType(Me(Me.tableZAVAZNOSTI.ZAVAZNOSTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZAVAZNOST' in table 'ZAVAZNOSTI' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAVAZNOSTI.ZAVAZNOSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableZAVAZNOSTI.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableZAVAZNOSTI.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZAVAZNOSTNull() As Boolean
            Return Me.IsNull(Me.tableZAVAZNOSTI.ZAVAZNOSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZAVAZNOSTNull()
            Me(Me.tableZAVAZNOSTI.ZAVAZNOSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetTBINRows() As TBINRow()
            If (Me.Table.ChildRelations("INTEG_61") Is Nothing) Then
                Return New TBINRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INTEG_61")),TBINRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function GetZAZNAMYRows() As ZAZNAMYRow()
            If (Me.Table.ChildRelations("INTEG_28") Is Nothing) Then
                Return New ZAZNAMYRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INTEG_28")),ZAZNAMYRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ZAZNAMYRow
        Inherits Global.System.Data.DataRow
        
        Private tableZAZNAMY As ZAZNAMYDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableZAZNAMY = CType(Me.Table,ZAZNAMYDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_MISTO() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.ID_MISTOColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_MISTO' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.ID_MISTOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_AUTOR() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.ID_AUTORColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_AUTOR' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.ID_AUTORColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_AUTOR2() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.ID_AUTOR2Column),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_AUTOR2' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.ID_AUTOR2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_ZAVAZNOST() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.ID_ZAVAZNOSTColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_ZAVAZNOST' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.ID_ZAVAZNOSTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ID_TYP() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.ID_TYPColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ID_TYP' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.ID_TYPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCHANGES1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.EXCHANGES1Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCHANGES1' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.EXCHANGES1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property EXCHANGES2() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.EXCHANGES2Column),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EXCHANGES2' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.EXCHANGES2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PROVIDER() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.PROVIDERColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PROVIDER' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.PROVIDERColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ZADANO() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.ZADANOColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZADANO' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.ZADANOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ZADANO_DB() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.ZADANO_DBColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ZADANO_DB' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.ZADANO_DBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OD_KDY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.OD_KDYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OD_KDY' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.OD_KDYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property DO_KDY() As Date
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.DO_KDYColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DO_KDY' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.DO_KDYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PREDMET() As String
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.PREDMETColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PREDMET' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.PREDMETColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TEXT() As String
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.TEXTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TEXT' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.TEXTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property HISTORIE() As String
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.HISTORIEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HISTORIE' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.HISTORIEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property NEM_CAS_ZAD() As Short
            Get
                Try 
                    Return CType(Me(Me.tableZAZNAMY.NEM_CAS_ZADColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NEM_CAS_ZAD' in table 'ZAZNAMY' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableZAZNAMY.NEM_CAS_ZADColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AUTORIRowByFK_AUTOR2() As AUTORIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_AUTOR2")),AUTORIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_AUTOR2"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property MISTARow() As MISTARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INTEG_26")),MISTARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INTEG_26"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property AUTORIRowByINTEG_27() As AUTORIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INTEG_27")),AUTORIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INTEG_27"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ZAVAZNOSTIRow() As ZAVAZNOSTIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INTEG_28")),ZAVAZNOSTIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INTEG_28"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TYPYRow() As TYPYRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INTEG_33")),TYPYRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INTEG_33"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetIDNull()
            Me(Me.tableZAZNAMY.IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_MISTONull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.ID_MISTOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_MISTONull()
            Me(Me.tableZAZNAMY.ID_MISTOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_AUTORNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.ID_AUTORColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_AUTORNull()
            Me(Me.tableZAZNAMY.ID_AUTORColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_AUTOR2Null() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.ID_AUTOR2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_AUTOR2Null()
            Me(Me.tableZAZNAMY.ID_AUTOR2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_ZAVAZNOSTNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.ID_ZAVAZNOSTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_ZAVAZNOSTNull()
            Me(Me.tableZAZNAMY.ID_ZAVAZNOSTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsID_TYPNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.ID_TYPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetID_TYPNull()
            Me(Me.tableZAZNAMY.ID_TYPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCHANGES1Null() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.EXCHANGES1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCHANGES1Null()
            Me(Me.tableZAZNAMY.EXCHANGES1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsEXCHANGES2Null() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.EXCHANGES2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetEXCHANGES2Null()
            Me(Me.tableZAZNAMY.EXCHANGES2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPROVIDERNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.PROVIDERColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPROVIDERNull()
            Me(Me.tableZAZNAMY.PROVIDERColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZADANONull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.ZADANOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZADANONull()
            Me(Me.tableZAZNAMY.ZADANOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsZADANO_DBNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.ZADANO_DBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetZADANO_DBNull()
            Me(Me.tableZAZNAMY.ZADANO_DBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOD_KDYNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.OD_KDYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOD_KDYNull()
            Me(Me.tableZAZNAMY.OD_KDYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsDO_KDYNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.DO_KDYColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetDO_KDYNull()
            Me(Me.tableZAZNAMY.DO_KDYColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsPREDMETNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.PREDMETColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetPREDMETNull()
            Me(Me.tableZAZNAMY.PREDMETColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsTEXTNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.TEXTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetTEXTNull()
            Me(Me.tableZAZNAMY.TEXTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsHISTORIENull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.HISTORIEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetHISTORIENull()
            Me(Me.tableZAZNAMY.HISTORIEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsNEM_CAS_ZADNull() As Boolean
            Return Me.IsNull(Me.tableZAZNAMY.NEM_CAS_ZADColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetNEM_CAS_ZADNull()
            Me(Me.tableZAZNAMY.NEM_CAS_ZADColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PS_ZAZ_ADDRow
        Inherits Global.System.Data.DataRow
        
        Private tablePS_ZAZ_ADD As PS_ZAZ_ADDDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePS_ZAZ_ADD = CType(Me.Table,PS_ZAZ_ADDDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OK() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePS_ZAZ_ADD.OKColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OK' in table 'PS_ZAZ_ADD' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePS_ZAZ_ADD.OKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOKNull() As Boolean
            Return Me.IsNull(Me.tablePS_ZAZ_ADD.OKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOKNull()
            Me(Me.tablePS_ZAZ_ADD.OKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class PS_ZAZ_ADD_NEWRow
        Inherits Global.System.Data.DataRow
        
        Private tablePS_ZAZ_ADD_NEW As PS_ZAZ_ADD_NEWDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePS_ZAZ_ADD_NEW = CType(Me.Table,PS_ZAZ_ADD_NEWDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property OK() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePS_ZAZ_ADD_NEW.OKColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OK' in table 'PS_ZAZ_ADD_NEW' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePS_ZAZ_ADD_NEW.OKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsOKNull() As Boolean
            Return Me.IsNull(Me.tablePS_ZAZ_ADD_NEW.OKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetOKNull()
            Me(Me.tablePS_ZAZ_ADD_NEW.OKColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class AUTORIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As AUTORIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As AUTORIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As AUTORIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class MISTARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MISTARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As MISTARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As MISTARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ODKAZYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ODKAZYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ODKAZYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ODKAZYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PROVIDERRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PROVIDERRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PROVIDERRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PROVIDERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class SLOVNIKRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As SLOVNIKRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As SLOVNIKRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As SLOVNIKRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TBINRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TBINRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TBINRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TBINRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class TYPYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TYPYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As TYPYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As TYPYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class USTREDNYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As USTREDNYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As USTREDNYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As USTREDNYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ZAMKYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZAMKYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ZAMKYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ZAMKYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ZAVAZNOSTIRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZAVAZNOSTIRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ZAVAZNOSTIRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ZAVAZNOSTIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class ZAZNAMYRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ZAZNAMYRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As ZAZNAMYRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As ZAZNAMYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PS_ZAZ_ADDRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PS_ZAZ_ADDRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PS_ZAZ_ADDRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PS_ZAZ_ADDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class PS_ZAZ_ADD_NEWRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As PS_ZAZ_ADD_NEWRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As PS_ZAZ_ADD_NEWRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As PS_ZAZ_ADD_NEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DataSetEdenTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class AUTORITableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "AUTORI"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("AUTOR", "AUTOR")
            tableMapping.ColumnMappings.Add("TELEFON", "TELEFON")
            tableMapping.ColumnMappings.Add("MOBIL", "MOBIL")
            tableMapping.ColumnMappings.Add("HESLO", "HESLO")
            tableMapping.ColumnMappings.Add("POCET", "POCET")
            tableMapping.ColumnMappings.Add("HODNOST", "HODNOST")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""AUTORI"" WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Origin"& _ 
                "al_ID)) AND ((@IsNull_AUTOR = 1 AND ""AUTOR"" IS NULL) OR (""AUTOR"" = @Original_AUT"& _ 
                "OR)) AND ((@IsNull_TELEFON = 1 AND ""TELEFON"" IS NULL) OR (""TELEFON"" = @Original_"& _ 
                "TELEFON)) AND ((@IsNull_MOBIL = 1 AND ""MOBIL"" IS NULL) OR (""MOBIL"" = @Original_M"& _ 
                "OBIL)) AND ((@IsNull_HESLO = 1 AND ""HESLO"" IS NULL) OR (""HESLO"" = @Original_HESL"& _ 
                "O)) AND ((@IsNull_POCET = 1 AND ""POCET"" IS NULL) OR (""POCET"" = @Original_POCET))"& _ 
                " AND ((@IsNull_HODNOST = 1 AND ""HODNOST"" IS NULL) OR (""HODNOST"" = @Original_HODN"& _ 
                "OST)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_AUTOR"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_AUTOR"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_TELEFON"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_TELEFON"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MOBIL"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MOBIL"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_HESLO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "HESLO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_HESLO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "HESLO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_HODNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_HODNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""AUTORI"" (""ID"", ""AUTOR"", ""TELEFON"", ""MOBIL"", ""HESLO"", ""POCET"", ""HODNO"& _ 
                "ST"") VALUES (@ID, @AUTOR, @TELEFON, @MOBIL, @HESLO, @POCET, @HODNOST)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@AUTOR"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "AUTOR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TELEFON"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MOBIL"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HESLO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "HESLO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HODNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""AUTORI"" SET ""ID"" = @ID, ""AUTOR"" = @AUTOR, ""TELEFON"" = @TELEFON, ""MOBIL"" ="& _ 
                " @MOBIL, ""HESLO"" = @HESLO, ""POCET"" = @POCET, ""HODNOST"" = @HODNOST WHERE (((@IsNu"& _ 
                "ll_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Original_ID)) AND ((@IsNull_AUTOR = 1 AN"& _ 
                "D ""AUTOR"" IS NULL) OR (""AUTOR"" = @Original_AUTOR)) AND ((@IsNull_TELEFON = 1 AND"& _ 
                " ""TELEFON"" IS NULL) OR (""TELEFON"" = @Original_TELEFON)) AND ((@IsNull_MOBIL = 1 "& _ 
                "AND ""MOBIL"" IS NULL) OR (""MOBIL"" = @Original_MOBIL)) AND ((@IsNull_HESLO = 1 AND"& _ 
                " ""HESLO"" IS NULL) OR (""HESLO"" = @Original_HESLO)) AND ((@IsNull_POCET = 1 AND ""P"& _ 
                "OCET"" IS NULL) OR (""POCET"" = @Original_POCET)) AND ((@IsNull_HODNOST = 1 AND ""HO"& _ 
                "DNOST"" IS NULL) OR (""HODNOST"" = @Original_HODNOST)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@AUTOR"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "AUTOR"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TELEFON"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MOBIL"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HESLO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "HESLO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HODNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_AUTOR"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_AUTOR"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_TELEFON"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_TELEFON"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MOBIL"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MOBIL"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_HESLO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "HESLO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_HESLO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "HESLO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_HODNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_HODNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""AUTOR"", ""TELEFON"", ""MOBIL"", ""HESLO"", ""POCET"", ""HODNOST"" FROM ""AUTOR"& _ 
                "I"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.AUTORIDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.AUTORIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.AUTORIDataTable = New DataSetEden.AUTORIDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.AUTORIDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "AUTORI")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Global.System.Nullable(Of Short), ByVal Original_AUTOR As String, ByVal Original_TELEFON As String, ByVal Original_MOBIL As String, ByVal Original_HESLO As Global.System.Nullable(Of Integer), ByVal Original_POCET As Global.System.Nullable(Of Integer), ByVal Original_HODNOST As Global.System.Nullable(Of Short)) As Integer
            If (Original_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_AUTOR Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_AUTOR,String)
            End If
            If (Original_TELEFON Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TELEFON,String)
            End If
            If (Original_MOBIL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MOBIL,String)
            End If
            If (Original_HESLO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_HESLO.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_POCET.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_POCET.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_HODNOST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_HODNOST.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Global.System.Nullable(Of Short), ByVal AUTOR As String, ByVal TELEFON As String, ByVal MOBIL As String, ByVal HESLO As Global.System.Nullable(Of Integer), ByVal POCET As Global.System.Nullable(Of Integer), ByVal HODNOST As Global.System.Nullable(Of Short)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (AUTOR Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(AUTOR,String)
            End If
            If (TELEFON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TELEFON,String)
            End If
            If (MOBIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MOBIL,String)
            End If
            If (HESLO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(HESLO.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (POCET.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(POCET.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (HODNOST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(HODNOST.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Global.System.Nullable(Of Short), ByVal AUTOR As String, ByVal TELEFON As String, ByVal MOBIL As String, ByVal HESLO As Global.System.Nullable(Of Integer), ByVal POCET As Global.System.Nullable(Of Integer), ByVal HODNOST As Global.System.Nullable(Of Short), ByVal Original_ID As Global.System.Nullable(Of Short), ByVal Original_AUTOR As String, ByVal Original_TELEFON As String, ByVal Original_MOBIL As String, ByVal Original_HESLO As Global.System.Nullable(Of Integer), ByVal Original_POCET As Global.System.Nullable(Of Integer), ByVal Original_HODNOST As Global.System.Nullable(Of Short)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (AUTOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(AUTOR,String)
            End If
            If (TELEFON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TELEFON,String)
            End If
            If (MOBIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MOBIL,String)
            End If
            If (HESLO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(HESLO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (POCET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(POCET.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (HODNOST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(HODNOST.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_AUTOR Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_AUTOR,String)
            End If
            If (Original_TELEFON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_TELEFON,String)
            End If
            If (Original_MOBIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_MOBIL,String)
            End If
            If (Original_HESLO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_HESLO.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_POCET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_POCET.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_HODNOST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_HODNOST.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MISTATableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MISTA"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("MISTO", "MISTO")
            tableMapping.ColumnMappings.Add("TELEFON", "TELEFON")
            tableMapping.ColumnMappings.Add("MOBIL", "MOBIL")
            tableMapping.ColumnMappings.Add("POCET", "POCET")
            tableMapping.ColumnMappings.Add("HODNOST", "HODNOST")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""MISTA"" WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Origina"& _ 
                "l_ID)) AND ((@IsNull_MISTO = 1 AND ""MISTO"" IS NULL) OR (""MISTO"" = @Original_MIST"& _ 
                "O)) AND ((@IsNull_TELEFON = 1 AND ""TELEFON"" IS NULL) OR (""TELEFON"" = @Original_T"& _ 
                "ELEFON)) AND ((@IsNull_MOBIL = 1 AND ""MOBIL"" IS NULL) OR (""MOBIL"" = @Original_MO"& _ 
                "BIL)) AND ((@IsNull_POCET = 1 AND ""POCET"" IS NULL) OR (""POCET"" = @Original_POCET"& _ 
                ")) AND ((@IsNull_HODNOST = 1 AND ""HODNOST"" IS NULL) OR (""HODNOST"" = @Original_HO"& _ 
                "DNOST)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MISTO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MISTO"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_TELEFON"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_TELEFON"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MOBIL"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MOBIL"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_HODNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_HODNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""MISTA"" (""ID"", ""MISTO"", ""TELEFON"", ""MOBIL"", ""POCET"", ""HODNOST"") VALUE"& _ 
                "S (@ID, @MISTO, @TELEFON, @MOBIL, @POCET, @HODNOST)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MISTO"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MISTO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TELEFON"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MOBIL"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HODNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""MISTA"" SET ""ID"" = @ID, ""MISTO"" = @MISTO, ""TELEFON"" = @TELEFON, ""MOBIL"" = "& _ 
                "@MOBIL, ""POCET"" = @POCET, ""HODNOST"" = @HODNOST WHERE (((@IsNull_ID = 1 AND ""ID"" "& _ 
                "IS NULL) OR (""ID"" = @Original_ID)) AND ((@IsNull_MISTO = 1 AND ""MISTO"" IS NULL) "& _ 
                "OR (""MISTO"" = @Original_MISTO)) AND ((@IsNull_TELEFON = 1 AND ""TELEFON"" IS NULL)"& _ 
                " OR (""TELEFON"" = @Original_TELEFON)) AND ((@IsNull_MOBIL = 1 AND ""MOBIL"" IS NULL"& _ 
                ") OR (""MOBIL"" = @Original_MOBIL)) AND ((@IsNull_POCET = 1 AND ""POCET"" IS NULL) O"& _ 
                "R (""POCET"" = @Original_POCET)) AND ((@IsNull_HODNOST = 1 AND ""HODNOST"" IS NULL) "& _ 
                "OR (""HODNOST"" = @Original_HODNOST)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MISTO"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MISTO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TELEFON"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MOBIL"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HODNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MISTO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MISTO"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_TELEFON"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_TELEFON"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "TELEFON"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MOBIL"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MOBIL"
            param.Size = 25
            param.IsNullable = true
            param.SourceColumn = "MOBIL"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_POCET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "POCET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_HODNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_HODNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "HODNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""MISTO"", ""TELEFON"", ""MOBIL"", ""POCET"", ""HODNOST"" FROM ""MISTA"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.MISTADataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.MISTADataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.MISTADataTable = New DataSetEden.MISTADataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.MISTADataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "MISTA")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Global.System.Nullable(Of Short), ByVal Original_MISTO As String, ByVal Original_TELEFON As String, ByVal Original_MOBIL As String, ByVal Original_POCET As Global.System.Nullable(Of Integer), ByVal Original_HODNOST As Global.System.Nullable(Of Short)) As Integer
            If (Original_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_MISTO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_MISTO,String)
            End If
            If (Original_TELEFON Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_TELEFON,String)
            End If
            If (Original_MOBIL Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_MOBIL,String)
            End If
            If (Original_POCET.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_POCET.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_HODNOST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_HODNOST.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Global.System.Nullable(Of Short), ByVal MISTO As String, ByVal TELEFON As String, ByVal MOBIL As String, ByVal POCET As Global.System.Nullable(Of Integer), ByVal HODNOST As Global.System.Nullable(Of Short)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MISTO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MISTO,String)
            End If
            If (TELEFON Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TELEFON,String)
            End If
            If (MOBIL Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MOBIL,String)
            End If
            If (POCET.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(POCET.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (HODNOST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(HODNOST.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Global.System.Nullable(Of Short), ByVal MISTO As String, ByVal TELEFON As String, ByVal MOBIL As String, ByVal POCET As Global.System.Nullable(Of Integer), ByVal HODNOST As Global.System.Nullable(Of Short), ByVal Original_ID As Global.System.Nullable(Of Short), ByVal Original_MISTO As String, ByVal Original_TELEFON As String, ByVal Original_MOBIL As String, ByVal Original_POCET As Global.System.Nullable(Of Integer), ByVal Original_HODNOST As Global.System.Nullable(Of Short)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MISTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MISTO,String)
            End If
            If (TELEFON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TELEFON,String)
            End If
            If (MOBIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MOBIL,String)
            End If
            If (POCET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(POCET.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (HODNOST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(HODNOST.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_MISTO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MISTO,String)
            End If
            If (Original_TELEFON Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_TELEFON,String)
            End If
            If (Original_MOBIL Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_MOBIL,String)
            End If
            If (Original_POCET.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_POCET.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_HODNOST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_HODNOST.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ODKAZYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ODKAZY"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ODKAZ", "ODKAZ")
            tableMapping.ColumnMappings.Add("CESTA", "CESTA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ODKAZY"" WHERE ((""ID"" = @Original_ID) AND ((@IsNull_ODKAZ = 1 AND ""OD"& _ 
                "KAZ"" IS NULL) OR (""ODKAZ"" = @Original_ODKAZ)) AND ((@IsNull_CESTA = 1 AND ""CESTA"& _ 
                """ IS NULL) OR (""CESTA"" = @Original_CESTA)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ODKAZ"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ODKAZ"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ODKAZ"
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ODKAZ"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_CESTA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "CESTA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_CESTA"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "CESTA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ODKAZY"" (""ID"", ""ODKAZ"", ""CESTA"") VALUES (@ID, @ODKAZ, @CESTA)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ODKAZ"
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ODKAZ"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@CESTA"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "CESTA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ODKAZY"" SET ""ID"" = @ID, ""ODKAZ"" = @ODKAZ, ""CESTA"" = @CESTA WHERE ((""ID"" ="& _ 
                " @Original_ID) AND ((@IsNull_ODKAZ = 1 AND ""ODKAZ"" IS NULL) OR (""ODKAZ"" = @Origi"& _ 
                "nal_ODKAZ)) AND ((@IsNull_CESTA = 1 AND ""CESTA"" IS NULL) OR (""CESTA"" = @Original"& _ 
                "_CESTA)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ODKAZ"
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ODKAZ"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@CESTA"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "CESTA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ODKAZ"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ODKAZ"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ODKAZ"
            param.Size = 30
            param.IsNullable = true
            param.SourceColumn = "ODKAZ"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_CESTA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "CESTA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_CESTA"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "CESTA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""ODKAZ"", ""CESTA"" FROM ""ODKAZY"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.ODKAZYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.ODKAZYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.ODKAZYDataTable = New DataSetEden.ODKAZYDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.ODKAZYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "ODKAZY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_ODKAZ As String, ByVal Original_CESTA As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_ODKAZ Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_ODKAZ,String)
            End If
            If (Original_CESTA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_CESTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal ODKAZ As String, ByVal CESTA As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (ODKAZ Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ODKAZ,String)
            End If
            If (CESTA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(CESTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Integer, ByVal ODKAZ As String, ByVal CESTA As String, ByVal Original_ID As Integer, ByVal Original_ODKAZ As String, ByVal Original_CESTA As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID,Integer)
            If (ODKAZ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ODKAZ,String)
            End If
            If (CESTA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CESTA,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID,Integer)
            If (Original_ODKAZ Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ODKAZ,String)
            End If
            If (Original_CESTA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_CESTA,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ODKAZ As String, ByVal CESTA As String, ByVal Original_ID As Integer, ByVal Original_ODKAZ As String, ByVal Original_CESTA As String) As Integer
            Return Me.Update(Original_ID, ODKAZ, CESTA, Original_ID, Original_ODKAZ, Original_CESTA)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PROVIDERTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PROVIDER"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PROVIDER", "PROVIDER")
            tableMapping.ColumnMappings.Add("MASKA", "MASKA")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""PROVIDER"" WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Orig"& _ 
                "inal_ID)) AND ((@IsNull_PROVIDER = 1 AND ""PROVIDER"" IS NULL) OR (""PROVIDER"" = @O"& _ 
                "riginal_PROVIDER)) AND ((@IsNull_MASKA = 1 AND ""MASKA"" IS NULL) OR (""MASKA"" = @O"& _ 
                "riginal_MASKA)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PROVIDER"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""PROVIDER"" (""ID"", ""PROVIDER"", ""MASKA"") VALUES (@ID, @PROVIDER, @MASKA"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PROVIDER"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""PROVIDER"" SET ""ID"" = @ID, ""PROVIDER"" = @PROVIDER, ""MASKA"" = @MASKA WHERE "& _ 
                "(((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Original_ID)) AND ((@IsNull_PROV"& _ 
                "IDER = 1 AND ""PROVIDER"" IS NULL) OR (""PROVIDER"" = @Original_PROVIDER)) AND ((@Is"& _ 
                "Null_MASKA = 1 AND ""MASKA"" IS NULL) OR (""MASKA"" = @Original_MASKA)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PROVIDER"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PROVIDER"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""PROVIDER"", ""MASKA"" FROM ""PROVIDER"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.PROVIDERDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.PROVIDERDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.PROVIDERDataTable = New DataSetEden.PROVIDERDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.PROVIDERDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "PROVIDER")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Global.System.Nullable(Of Integer), ByVal Original_PROVIDER As String, ByVal Original_MASKA As Global.System.Nullable(Of Integer)) As Integer
            If (Original_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_PROVIDER Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_PROVIDER,String)
            End If
            If (Original_MASKA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_MASKA.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Global.System.Nullable(Of Integer), ByVal PROVIDER As String, ByVal MASKA As Global.System.Nullable(Of Integer)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PROVIDER Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROVIDER,String)
            End If
            If (MASKA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MASKA.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Global.System.Nullable(Of Integer), ByVal PROVIDER As String, ByVal MASKA As Global.System.Nullable(Of Integer), ByVal Original_ID As Global.System.Nullable(Of Integer), ByVal Original_PROVIDER As String, ByVal Original_MASKA As Global.System.Nullable(Of Integer)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (PROVIDER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROVIDER,String)
            End If
            If (MASKA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MASKA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_PROVIDER Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_PROVIDER,String)
            End If
            If (Original_MASKA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_MASKA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SLOVNIKTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SLOVNIK"
            tableMapping.ColumnMappings.Add("SLOVO", "SLOVO")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""SLOVNIK"" WHERE (((@IsNull_SLOVO = 1 AND ""SLOVO"" IS NULL) OR (""SLOVO"""& _ 
                " = @Original_SLOVO)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_SLOVO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "SLOVO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_SLOVO"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "SLOVO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""SLOVNIK"" (""SLOVO"") VALUES (@SLOVO)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@SLOVO"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "SLOVO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""SLOVNIK"" SET ""SLOVO"" = @SLOVO WHERE (((@IsNull_SLOVO = 1 AND ""SLOVO"" IS N"& _ 
                "ULL) OR (""SLOVO"" = @Original_SLOVO)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@SLOVO"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "SLOVO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_SLOVO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "SLOVO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_SLOVO"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "SLOVO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""SLOVO"" FROM ""SLOVNIK"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.SLOVNIKDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.SLOVNIKDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.SLOVNIKDataTable = New DataSetEden.SLOVNIKDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.SLOVNIKDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "SLOVNIK")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SLOVO As String) As Integer
            If (Original_SLOVO Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_SLOVO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SLOVO As String) As Integer
            If (SLOVO Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SLOVO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SLOVO As String, ByVal Original_SLOVO As String) As Integer
            If (SLOVO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SLOVO,String)
            End If
            If (Original_SLOVO Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SLOVO,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TBINTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TBIN"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ID_MISTO", "ID_MISTO")
            tableMapping.ColumnMappings.Add("ID_AUTOR", "ID_AUTOR")
            tableMapping.ColumnMappings.Add("ID_AUTOR2", "ID_AUTOR2")
            tableMapping.ColumnMappings.Add("ID_ZAVAZNOST", "ID_ZAVAZNOST")
            tableMapping.ColumnMappings.Add("ID_TYP", "ID_TYP")
            tableMapping.ColumnMappings.Add("EXCHANGES1", "EXCHANGES1")
            tableMapping.ColumnMappings.Add("EXCHANGES2", "EXCHANGES2")
            tableMapping.ColumnMappings.Add("PROVIDER", "PROVIDER")
            tableMapping.ColumnMappings.Add("ZADANO", "ZADANO")
            tableMapping.ColumnMappings.Add("ZADANO_DB", "ZADANO_DB")
            tableMapping.ColumnMappings.Add("OD_KDY", "OD_KDY")
            tableMapping.ColumnMappings.Add("DO_KDY", "DO_KDY")
            tableMapping.ColumnMappings.Add("SMAZANO", "SMAZANO")
            tableMapping.ColumnMappings.Add("PREDMET", "PREDMET")
            tableMapping.ColumnMappings.Add("TEXT", "TEXT")
            tableMapping.ColumnMappings.Add("HISTORIE", "HISTORIE")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TBIN"" WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Original"& _ 
                "_ID)) AND ((@IsNull_ID_MISTO = 1 AND ""ID_MISTO"" IS NULL) OR (""ID_MISTO"" = @Origi"& _ 
                "nal_ID_MISTO)) AND ((@IsNull_ID_AUTOR = 1 AND ""ID_AUTOR"" IS NULL) OR (""ID_AUTOR"""& _ 
                " = @Original_ID_AUTOR)) AND ((@IsNull_ID_AUTOR2 = 1 AND ""ID_AUTOR2"" IS NULL) OR "& _ 
                "(""ID_AUTOR2"" = @Original_ID_AUTOR2)) AND ((@IsNull_ID_ZAVAZNOST = 1 AND ""ID_ZAVA"& _ 
                "ZNOST"" IS NULL) OR (""ID_ZAVAZNOST"" = @Original_ID_ZAVAZNOST)) AND ((@IsNull_ID_T"& _ 
                "YP = 1 AND ""ID_TYP"" IS NULL) OR (""ID_TYP"" = @Original_ID_TYP)) AND ((@IsNull_EXC"& _ 
                "HANGES1 = 1 AND ""EXCHANGES1"" IS NULL) OR (""EXCHANGES1"" = @Original_EXCHANGES1)) "& _ 
                "AND ((@IsNull_EXCHANGES2 = 1 AND ""EXCHANGES2"" IS NULL) OR (""EXCHANGES2"" = @Origi"& _ 
                "nal_EXCHANGES2)) AND ((@IsNull_PROVIDER = 1 AND ""PROVIDER"" IS NULL) OR (""PROVIDE"& _ 
                "R"" = @Original_PROVIDER)) AND ((@IsNull_ZADANO = 1 AND ""ZADANO"" IS NULL) OR (""ZA"& _ 
                "DANO"" = @Original_ZADANO)) AND ((@IsNull_ZADANO_DB = 1 AND ""ZADANO_DB"" IS NULL) "& _ 
                "OR (""ZADANO_DB"" = @Original_ZADANO_DB)) AND ((@IsNull_OD_KDY = 1 AND ""OD_KDY"" IS"& _ 
                " NULL) OR (""OD_KDY"" = @Original_OD_KDY)) AND ((@IsNull_DO_KDY = 1 AND ""DO_KDY"" I"& _ 
                "S NULL) OR (""DO_KDY"" = @Original_DO_KDY)) AND ((@IsNull_SMAZANO = 1 AND ""SMAZANO"& _ 
                """ IS NULL) OR (""SMAZANO"" = @Original_SMAZANO)) AND ((@IsNull_PREDMET = 1 AND ""PR"& _ 
                "EDMET"" IS NULL) OR (""PREDMET"" = @Original_PREDMET)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_TYP"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_TYP"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZADANO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZADANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZADANO_DB"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZADANO_DB"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_OD_KDY"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_DO_KDY"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_SMAZANO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "SMAZANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_SMAZANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "SMAZANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PREDMET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TBIN"" (""ID"", ""ID_MISTO"", ""ID_AUTOR"", ""ID_AUTOR2"", ""ID_ZAVAZNOST"", ""I"& _ 
                "D_TYP"", ""EXCHANGES1"", ""EXCHANGES2"", ""PROVIDER"", ""ZADANO"", ""ZADANO_DB"", ""OD_KDY"","& _ 
                " ""DO_KDY"", ""SMAZANO"", ""PREDMET"", ""TEXT"", ""HISTORIE"") VALUES (@ID, @ID_MISTO, @ID"& _ 
                "_AUTOR, @ID_AUTOR2, @ID_ZAVAZNOST, @ID_TYP, @EXCHANGES1, @EXCHANGES2, @PROVIDER,"& _ 
                " @ZADANO, @ZADANO_DB, @OD_KDY, @DO_KDY, @SMAZANO, @PREDMET, @TEXT, @HISTORIE)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_TYP"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZADANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZADANO_DB"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@SMAZANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "SMAZANO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TEXT"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "TEXT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HISTORIE"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "HISTORIE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TBIN"" SET ""ID"" = @ID, ""ID_MISTO"" = @ID_MISTO, ""ID_AUTOR"" = @ID_AUTOR, ""ID"& _ 
                "_AUTOR2"" = @ID_AUTOR2, ""ID_ZAVAZNOST"" = @ID_ZAVAZNOST, ""ID_TYP"" = @ID_TYP, ""EXCH"& _ 
                "ANGES1"" = @EXCHANGES1, ""EXCHANGES2"" = @EXCHANGES2, ""PROVIDER"" = @PROVIDER, ""ZADA"& _ 
                "NO"" = @ZADANO, ""ZADANO_DB"" = @ZADANO_DB, ""OD_KDY"" = @OD_KDY, ""DO_KDY"" = @DO_KDY,"& _ 
                " ""SMAZANO"" = @SMAZANO, ""PREDMET"" = @PREDMET, ""TEXT"" = @TEXT, ""HISTORIE"" = @HISTO"& _ 
                "RIE WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Original_ID)) AND ((@I"& _ 
                "sNull_ID_MISTO = 1 AND ""ID_MISTO"" IS NULL) OR (""ID_MISTO"" = @Original_ID_MISTO))"& _ 
                " AND ((@IsNull_ID_AUTOR = 1 AND ""ID_AUTOR"" IS NULL) OR (""ID_AUTOR"" = @Original_I"& _ 
                "D_AUTOR)) AND ((@IsNull_ID_AUTOR2 = 1 AND ""ID_AUTOR2"" IS NULL) OR (""ID_AUTOR2"" ="& _ 
                " @Original_ID_AUTOR2)) AND ((@IsNull_ID_ZAVAZNOST = 1 AND ""ID_ZAVAZNOST"" IS NULL"& _ 
                ") OR (""ID_ZAVAZNOST"" = @Original_ID_ZAVAZNOST)) AND ((@IsNull_ID_TYP = 1 AND ""ID"& _ 
                "_TYP"" IS NULL) OR (""ID_TYP"" = @Original_ID_TYP)) AND ((@IsNull_EXCHANGES1 = 1 AN"& _ 
                "D ""EXCHANGES1"" IS NULL) OR (""EXCHANGES1"" = @Original_EXCHANGES1)) AND ((@IsNull_"& _ 
                "EXCHANGES2 = 1 AND ""EXCHANGES2"" IS NULL) OR (""EXCHANGES2"" = @Original_EXCHANGES2"& _ 
                ")) AND ((@IsNull_PROVIDER = 1 AND ""PROVIDER"" IS NULL) OR (""PROVIDER"" = @Original"& _ 
                "_PROVIDER)) AND ((@IsNull_ZADANO = 1 AND ""ZADANO"" IS NULL) OR (""ZADANO"" = @Origi"& _ 
                "nal_ZADANO)) AND ((@IsNull_ZADANO_DB = 1 AND ""ZADANO_DB"" IS NULL) OR (""ZADANO_DB"& _ 
                """ = @Original_ZADANO_DB)) AND ((@IsNull_OD_KDY = 1 AND ""OD_KDY"" IS NULL) OR (""OD"& _ 
                "_KDY"" = @Original_OD_KDY)) AND ((@IsNull_DO_KDY = 1 AND ""DO_KDY"" IS NULL) OR (""D"& _ 
                "O_KDY"" = @Original_DO_KDY)) AND ((@IsNull_SMAZANO = 1 AND ""SMAZANO"" IS NULL) OR "& _ 
                "(""SMAZANO"" = @Original_SMAZANO)) AND ((@IsNull_PREDMET = 1 AND ""PREDMET"" IS NULL"& _ 
                ") OR (""PREDMET"" = @Original_PREDMET)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_TYP"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZADANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZADANO_DB"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@SMAZANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "SMAZANO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TEXT"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "TEXT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HISTORIE"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "HISTORIE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_TYP"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_TYP"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZADANO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZADANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZADANO_DB"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZADANO_DB"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_OD_KDY"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_DO_KDY"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_SMAZANO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "SMAZANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_SMAZANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "SMAZANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PREDMET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""ID_MISTO"", ""ID_AUTOR"", ""ID_AUTOR2"", ""ID_ZAVAZNOST"", ""ID_TYP"", ""EXCH"& _ 
                "ANGES1"", ""EXCHANGES2"", ""PROVIDER"", ""ZADANO"", ""ZADANO_DB"", ""OD_KDY"", ""DO_KDY"", ""S"& _ 
                "MAZANO"", ""PREDMET"", ""TEXT"", ""HISTORIE"" FROM ""TBIN"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.TBINDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.TBINDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.TBINDataTable = New DataSetEden.TBINDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.TBINDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "TBIN")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Global.System.Nullable(Of Integer), ByVal Original_ID_MISTO As Global.System.Nullable(Of Short), ByVal Original_ID_AUTOR As Global.System.Nullable(Of Short), ByVal Original_ID_AUTOR2 As Global.System.Nullable(Of Short), ByVal Original_ID_ZAVAZNOST As Global.System.Nullable(Of Short), ByVal Original_ID_TYP As Global.System.Nullable(Of Short), ByVal Original_EXCHANGES1 As Global.System.Nullable(Of Integer), ByVal Original_EXCHANGES2 As Global.System.Nullable(Of Integer), ByVal Original_PROVIDER As Global.System.Nullable(Of Integer), ByVal Original_ZADANO As Global.System.Nullable(Of Date), ByVal Original_ZADANO_DB As Global.System.Nullable(Of Date), ByVal Original_OD_KDY As Global.System.Nullable(Of Date), ByVal Original_DO_KDY As Global.System.Nullable(Of Date), ByVal Original_SMAZANO As Global.System.Nullable(Of Date), ByVal Original_PREDMET As String) As Integer
            If (Original_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_MISTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ID_MISTO.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_AUTOR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_AUTOR.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_AUTOR2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ID_AUTOR2.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_ZAVAZNOST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ID_ZAVAZNOST.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_TYP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ID_TYP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGES1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_EXCHANGES1.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGES2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_EXCHANGES2.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_PROVIDER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_PROVIDER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_ZADANO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ZADANO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_ZADANO_DB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_ZADANO_DB.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_OD_KDY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_OD_KDY.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_DO_KDY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_DO_KDY.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_SMAZANO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_SMAZANO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDMET Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_PREDMET,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Integer),  _
                    ByVal ID_MISTO As Global.System.Nullable(Of Short),  _
                    ByVal ID_AUTOR As Global.System.Nullable(Of Short),  _
                    ByVal ID_AUTOR2 As Global.System.Nullable(Of Short),  _
                    ByVal ID_ZAVAZNOST As Global.System.Nullable(Of Short),  _
                    ByVal ID_TYP As Global.System.Nullable(Of Short),  _
                    ByVal EXCHANGES1 As Global.System.Nullable(Of Integer),  _
                    ByVal EXCHANGES2 As Global.System.Nullable(Of Integer),  _
                    ByVal PROVIDER As Global.System.Nullable(Of Integer),  _
                    ByVal ZADANO As Global.System.Nullable(Of Date),  _
                    ByVal ZADANO_DB As Global.System.Nullable(Of Date),  _
                    ByVal OD_KDY As Global.System.Nullable(Of Date),  _
                    ByVal DO_KDY As Global.System.Nullable(Of Date),  _
                    ByVal SMAZANO As Global.System.Nullable(Of Date),  _
                    ByVal PREDMET As String,  _
                    ByVal TEXT As String,  _
                    ByVal HISTORIE As String) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_MISTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_MISTO.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID_AUTOR.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ID_AUTOR2.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAVAZNOST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_ZAVAZNOST.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ID_TYP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_TYP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGES1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(EXCHANGES1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGES2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(EXCHANGES2.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PROVIDER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PROVIDER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ZADANO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ZADANO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ZADANO_DB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ZADANO_DB.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (OD_KDY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(OD_KDY.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DO_KDY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DO_KDY.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (SMAZANO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(SMAZANO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PREDMET Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(PREDMET,String)
            End If
            If (TEXT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(TEXT,String)
            End If
            If (HISTORIE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(HISTORIE,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID As Global.System.Nullable(Of Integer),  _
                    ByVal ID_MISTO As Global.System.Nullable(Of Short),  _
                    ByVal ID_AUTOR As Global.System.Nullable(Of Short),  _
                    ByVal ID_AUTOR2 As Global.System.Nullable(Of Short),  _
                    ByVal ID_ZAVAZNOST As Global.System.Nullable(Of Short),  _
                    ByVal ID_TYP As Global.System.Nullable(Of Short),  _
                    ByVal EXCHANGES1 As Global.System.Nullable(Of Integer),  _
                    ByVal EXCHANGES2 As Global.System.Nullable(Of Integer),  _
                    ByVal PROVIDER As Global.System.Nullable(Of Integer),  _
                    ByVal ZADANO As Global.System.Nullable(Of Date),  _
                    ByVal ZADANO_DB As Global.System.Nullable(Of Date),  _
                    ByVal OD_KDY As Global.System.Nullable(Of Date),  _
                    ByVal DO_KDY As Global.System.Nullable(Of Date),  _
                    ByVal SMAZANO As Global.System.Nullable(Of Date),  _
                    ByVal PREDMET As String,  _
                    ByVal TEXT As String,  _
                    ByVal HISTORIE As String,  _
                    ByVal Original_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ID_MISTO As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID_AUTOR As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID_AUTOR2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID_ZAVAZNOST As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID_TYP As Global.System.Nullable(Of Short),  _
                    ByVal Original_EXCHANGES1 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_EXCHANGES2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROVIDER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ZADANO As Global.System.Nullable(Of Date),  _
                    ByVal Original_ZADANO_DB As Global.System.Nullable(Of Date),  _
                    ByVal Original_OD_KDY As Global.System.Nullable(Of Date),  _
                    ByVal Original_DO_KDY As Global.System.Nullable(Of Date),  _
                    ByVal Original_SMAZANO As Global.System.Nullable(Of Date),  _
                    ByVal Original_PREDMET As String) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_MISTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_MISTO.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID_AUTOR.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ID_AUTOR2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAVAZNOST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_ZAVAZNOST.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ID_TYP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_TYP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGES1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(EXCHANGES1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGES2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(EXCHANGES2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PROVIDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PROVIDER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ZADANO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ZADANO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ZADANO_DB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ZADANO_DB.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (OD_KDY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(OD_KDY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DO_KDY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DO_KDY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (SMAZANO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(SMAZANO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (PREDMET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(PREDMET,String)
            End If
            If (TEXT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TEXT,String)
            End If
            If (HISTORIE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(HISTORIE,String)
            End If
            If (Original_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_MISTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ID_MISTO.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_AUTOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ID_AUTOR.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_AUTOR2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ID_AUTOR2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_ZAVAZNOST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ID_ZAVAZNOST.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_TYP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ID_TYP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGES1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_EXCHANGES1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGES2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_EXCHANGES2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_PROVIDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_PROVIDER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_ZADANO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_ZADANO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_ZADANO_DB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ZADANO_DB.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_OD_KDY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_OD_KDY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_DO_KDY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_DO_KDY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_SMAZANO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_SMAZANO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDMET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_PREDMET,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TYPYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TYPY"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("TYP", "TYP")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""TYPY"" WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Original"& _ 
                "_ID)) AND ((@IsNull_TYP = 1 AND ""TYP"" IS NULL) OR (""TYP"" = @Original_TYP)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_TYP"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_TYP"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""TYPY"" (""ID"", ""TYP"") VALUES (@ID, @TYP)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TYP"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""TYPY"" SET ""ID"" = @ID, ""TYP"" = @TYP WHERE (((@IsNull_ID = 1 AND ""ID"" IS NU"& _ 
                "LL) OR (""ID"" = @Original_ID)) AND ((@IsNull_TYP = 1 AND ""TYP"" IS NULL) OR (""TYP"""& _ 
                " = @Original_TYP)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TYP"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_TYP"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_TYP"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""TYP"" FROM ""TYPY"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.TYPYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.TYPYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.TYPYDataTable = New DataSetEden.TYPYDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.TYPYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "TYPY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Global.System.Nullable(Of Short), ByVal Original_TYP As String) As Integer
            If (Original_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_TYP Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_TYP,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Global.System.Nullable(Of Short), ByVal TYP As String) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (TYP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TYP,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Global.System.Nullable(Of Short), ByVal TYP As String, ByVal Original_ID As Global.System.Nullable(Of Short), ByVal Original_TYP As String) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (TYP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TYP,String)
            End If
            If (Original_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_TYP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_TYP,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class USTREDNYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "USTREDNY"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ID_MISTO", "ID_MISTO")
            tableMapping.ColumnMappings.Add("USTREDNA", "USTREDNA")
            tableMapping.ColumnMappings.Add("POPIS", "POPIS")
            tableMapping.ColumnMappings.Add("MASKA", "MASKA")
            tableMapping.ColumnMappings.Add("BLOK_USTREDEN", "BLOK_USTREDEN")
            tableMapping.ColumnMappings.Add("ID_PROVIDER", "ID_PROVIDER")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""USTREDNY"" WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Orig"& _ 
                "inal_ID)) AND ((@IsNull_ID_MISTO = 1 AND ""ID_MISTO"" IS NULL) OR (""ID_MISTO"" = @O"& _ 
                "riginal_ID_MISTO)) AND ((@IsNull_USTREDNA = 1 AND ""USTREDNA"" IS NULL) OR (""USTRE"& _ 
                "DNA"" = @Original_USTREDNA)) AND ((@IsNull_POPIS = 1 AND ""POPIS"" IS NULL) OR (""PO"& _ 
                "PIS"" = @Original_POPIS)) AND ((@IsNull_MASKA = 1 AND ""MASKA"" IS NULL) OR (""MASKA"& _ 
                """ = @Original_MASKA)) AND ((@IsNull_BLOK_USTREDEN = 1 AND ""BLOK_USTREDEN"" IS NUL"& _ 
                "L) OR (""BLOK_USTREDEN"" = @Original_BLOK_USTREDEN)) AND ((@IsNull_ID_PROVIDER = 1"& _ 
                " AND ""ID_PROVIDER"" IS NULL) OR (""ID_PROVIDER"" = @Original_ID_PROVIDER)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_USTREDNA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USTREDNA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_USTREDNA"
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USTREDNA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_POPIS"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "POPIS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_POPIS"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "POPIS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_BLOK_USTREDEN"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "BLOK_USTREDEN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_BLOK_USTREDEN"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "BLOK_USTREDEN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""USTREDNY"" (""ID"", ""ID_MISTO"", ""USTREDNA"", ""POPIS"", ""MASKA"", ""BLOK_UST"& _ 
                "REDEN"", ""ID_PROVIDER"") VALUES (@ID, @ID_MISTO, @USTREDNA, @POPIS, @MASKA, @BLOK_"& _ 
                "USTREDEN, @ID_PROVIDER)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@USTREDNA"
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USTREDNA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@POPIS"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "POPIS"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@BLOK_USTREDEN"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "BLOK_USTREDEN"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_PROVIDER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""USTREDNY"" SET ""ID"" = @ID, ""ID_MISTO"" = @ID_MISTO, ""USTREDNA"" = @USTREDNA,"& _ 
                " ""POPIS"" = @POPIS, ""MASKA"" = @MASKA, ""BLOK_USTREDEN"" = @BLOK_USTREDEN, ""ID_PROVI"& _ 
                "DER"" = @ID_PROVIDER WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Origin"& _ 
                "al_ID)) AND ((@IsNull_ID_MISTO = 1 AND ""ID_MISTO"" IS NULL) OR (""ID_MISTO"" = @Ori"& _ 
                "ginal_ID_MISTO)) AND ((@IsNull_USTREDNA = 1 AND ""USTREDNA"" IS NULL) OR (""USTREDN"& _ 
                "A"" = @Original_USTREDNA)) AND ((@IsNull_POPIS = 1 AND ""POPIS"" IS NULL) OR (""POPI"& _ 
                "S"" = @Original_POPIS)) AND ((@IsNull_MASKA = 1 AND ""MASKA"" IS NULL) OR (""MASKA"" "& _ 
                "= @Original_MASKA)) AND ((@IsNull_BLOK_USTREDEN = 1 AND ""BLOK_USTREDEN"" IS NULL)"& _ 
                " OR (""BLOK_USTREDEN"" = @Original_BLOK_USTREDEN)) AND ((@IsNull_ID_PROVIDER = 1 A"& _ 
                "ND ""ID_PROVIDER"" IS NULL) OR (""ID_PROVIDER"" = @Original_ID_PROVIDER)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@USTREDNA"
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USTREDNA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@POPIS"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "POPIS"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@BLOK_USTREDEN"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "BLOK_USTREDEN"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_PROVIDER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_USTREDNA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USTREDNA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_USTREDNA"
            param.Size = 10
            param.IsNullable = true
            param.SourceColumn = "USTREDNA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_POPIS"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "POPIS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_POPIS"
            param.Size = 40
            param.IsNullable = true
            param.SourceColumn = "POPIS"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_MASKA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "MASKA"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_BLOK_USTREDEN"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "BLOK_USTREDEN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_BLOK_USTREDEN"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "BLOK_USTREDEN"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""ID_MISTO"", ""USTREDNA"", ""POPIS"", ""MASKA"", ""BLOK_USTREDEN"", ""ID_PROVI"& _ 
                "DER"" FROM ""USTREDNY"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.USTREDNYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.USTREDNYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.USTREDNYDataTable = New DataSetEden.USTREDNYDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.USTREDNYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "USTREDNY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Global.System.Nullable(Of Integer), ByVal Original_ID_MISTO As Global.System.Nullable(Of Short), ByVal Original_USTREDNA As String, ByVal Original_POPIS As String, ByVal Original_MASKA As Global.System.Nullable(Of Integer), ByVal Original_BLOK_USTREDEN As Global.System.Nullable(Of Short), ByVal Original_ID_PROVIDER As Global.System.Nullable(Of Short)) As Integer
            If (Original_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_MISTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ID_MISTO.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_USTREDNA Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_USTREDNA,String)
            End If
            If (Original_POPIS Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_POPIS,String)
            End If
            If (Original_MASKA.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_MASKA.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_BLOK_USTREDEN.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_BLOK_USTREDEN.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_PROVIDER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_ID_PROVIDER.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Global.System.Nullable(Of Integer), ByVal ID_MISTO As Global.System.Nullable(Of Short), ByVal USTREDNA As String, ByVal POPIS As String, ByVal MASKA As Global.System.Nullable(Of Integer), ByVal BLOK_USTREDEN As Global.System.Nullable(Of Short), ByVal ID_PROVIDER As Global.System.Nullable(Of Short)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_MISTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_MISTO.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (USTREDNA Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(USTREDNA,String)
            End If
            If (POPIS Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(POPIS,String)
            End If
            If (MASKA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(MASKA.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BLOK_USTREDEN.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(BLOK_USTREDEN.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ID_PROVIDER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ID_PROVIDER.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Global.System.Nullable(Of Integer), ByVal ID_MISTO As Global.System.Nullable(Of Short), ByVal USTREDNA As String, ByVal POPIS As String, ByVal MASKA As Global.System.Nullable(Of Integer), ByVal BLOK_USTREDEN As Global.System.Nullable(Of Short), ByVal ID_PROVIDER As Global.System.Nullable(Of Short), ByVal Original_ID As Global.System.Nullable(Of Integer), ByVal Original_ID_MISTO As Global.System.Nullable(Of Short), ByVal Original_USTREDNA As String, ByVal Original_POPIS As String, ByVal Original_MASKA As Global.System.Nullable(Of Integer), ByVal Original_BLOK_USTREDEN As Global.System.Nullable(Of Short), ByVal Original_ID_PROVIDER As Global.System.Nullable(Of Short)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_MISTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_MISTO.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (USTREDNA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(USTREDNA,String)
            End If
            If (POPIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(POPIS,String)
            End If
            If (MASKA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(MASKA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BLOK_USTREDEN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(BLOK_USTREDEN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (ID_PROVIDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ID_PROVIDER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_MISTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_ID_MISTO.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_USTREDNA Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_USTREDNA,String)
            End If
            If (Original_POPIS Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_POPIS,String)
            End If
            If (Original_MASKA.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_MASKA.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_BLOK_USTREDEN.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_BLOK_USTREDEN.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_PROVIDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ID_PROVIDER.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZAMKYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZAMKY"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ID_ZAZNAMU", "ID_ZAZNAMU")
            tableMapping.ColumnMappings.Add("KDO_POUZIVA", "KDO_POUZIVA")
            tableMapping.ColumnMappings.Add("CAS_ZAMKNUTI", "CAS_ZAMKNUTI")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ZAMKY"" (""ID"", ""ID_ZAZNAMU"", ""KDO_POUZIVA"", ""CAS_ZAMKNUTI"") VALUES (@"& _ 
                "ID, @ID_ZAZNAMU, @KDO_POUZIVA, @CAS_ZAMKNUTI)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_ZAZNAMU"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID_ZAZNAMU"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@KDO_POUZIVA"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "KDO_POUZIVA"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@CAS_ZAMKNUTI"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "CAS_ZAMKNUTI"
            Me._adapter.InsertCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""ID_ZAZNAMU"", ""KDO_POUZIVA"", ""CAS_ZAMKNUTI"" FROM ""ZAMKY"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.ZAMKYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.ZAMKYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.ZAMKYDataTable = New DataSetEden.ZAMKYDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.ZAMKYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "ZAMKY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Global.System.Nullable(Of Integer), ByVal ID_ZAZNAMU As Global.System.Nullable(Of Integer), ByVal KDO_POUZIVA As Global.System.Nullable(Of Integer), ByVal CAS_ZAMKNUTI As Global.System.Nullable(Of Date)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAZNAMU.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_ZAZNAMU.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (KDO_POUZIVA.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(KDO_POUZIVA.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (CAS_ZAMKNUTI.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(CAS_ZAMKNUTI.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZAVAZNOSTITableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZAVAZNOSTI"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ZAVAZNOST", "ZAVAZNOST")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ZAVAZNOSTI"" WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Or"& _ 
                "iginal_ID)) AND ((@IsNull_ZAVAZNOST = 1 AND ""ZAVAZNOST"" IS NULL) OR (""ZAVAZNOST"""& _ 
                " = @Original_ZAVAZNOST)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZAVAZNOST"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ZAVAZNOSTI"" (""ID"", ""ZAVAZNOST"") VALUES (@ID, @ZAVAZNOST)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZAVAZNOST"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ZAVAZNOST"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ZAVAZNOSTI"" SET ""ID"" = @ID, ""ZAVAZNOST"" = @ZAVAZNOST WHERE (((@IsNull_ID "& _ 
                "= 1 AND ""ID"" IS NULL) OR (""ID"" = @Original_ID)) AND ((@IsNull_ZAVAZNOST = 1 AND "& _ 
                """ZAVAZNOST"" IS NULL) OR (""ZAVAZNOST"" = @Original_ZAVAZNOST)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZAVAZNOST"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ZAVAZNOST"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZAVAZNOST"
            param.Size = 50
            param.IsNullable = true
            param.SourceColumn = "ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""ZAVAZNOST"" FROM ""ZAVAZNOSTI"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.ZAVAZNOSTIDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.ZAVAZNOSTIDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.ZAVAZNOSTIDataTable = New DataSetEden.ZAVAZNOSTIDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.ZAVAZNOSTIDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "ZAVAZNOSTI")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Global.System.Nullable(Of Short), ByVal Original_ZAVAZNOST As String) As Integer
            If (Original_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_ZAVAZNOST Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ZAVAZNOST,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Global.System.Nullable(Of Short), ByVal ZAVAZNOST As String) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ZAVAZNOST Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ZAVAZNOST,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Global.System.Nullable(Of Short), ByVal ZAVAZNOST As String, ByVal Original_ID As Global.System.Nullable(Of Short), ByVal Original_ZAVAZNOST As String) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ZAVAZNOST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ZAVAZNOST,String)
            End If
            If (Original_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_ID.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_ZAVAZNOST Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ZAVAZNOST,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ZAZNAMYTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ZAZNAMY"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("ID_MISTO", "ID_MISTO")
            tableMapping.ColumnMappings.Add("ID_AUTOR", "ID_AUTOR")
            tableMapping.ColumnMappings.Add("ID_AUTOR2", "ID_AUTOR2")
            tableMapping.ColumnMappings.Add("ID_ZAVAZNOST", "ID_ZAVAZNOST")
            tableMapping.ColumnMappings.Add("ID_TYP", "ID_TYP")
            tableMapping.ColumnMappings.Add("EXCHANGES1", "EXCHANGES1")
            tableMapping.ColumnMappings.Add("EXCHANGES2", "EXCHANGES2")
            tableMapping.ColumnMappings.Add("PROVIDER", "PROVIDER")
            tableMapping.ColumnMappings.Add("ZADANO", "ZADANO")
            tableMapping.ColumnMappings.Add("ZADANO_DB", "ZADANO_DB")
            tableMapping.ColumnMappings.Add("OD_KDY", "OD_KDY")
            tableMapping.ColumnMappings.Add("DO_KDY", "DO_KDY")
            tableMapping.ColumnMappings.Add("PREDMET", "PREDMET")
            tableMapping.ColumnMappings.Add("TEXT", "TEXT")
            tableMapping.ColumnMappings.Add("HISTORIE", "HISTORIE")
            tableMapping.ColumnMappings.Add("NEM_CAS_ZAD", "NEM_CAS_ZAD")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""ZAZNAMY"" WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Origi"& _ 
                "nal_ID)) AND ((@IsNull_ID_MISTO = 1 AND ""ID_MISTO"" IS NULL) OR (""ID_MISTO"" = @Or"& _ 
                "iginal_ID_MISTO)) AND ((@IsNull_ID_AUTOR = 1 AND ""ID_AUTOR"" IS NULL) OR (""ID_AUT"& _ 
                "OR"" = @Original_ID_AUTOR)) AND ((@IsNull_ID_AUTOR2 = 1 AND ""ID_AUTOR2"" IS NULL) "& _ 
                "OR (""ID_AUTOR2"" = @Original_ID_AUTOR2)) AND ((@IsNull_ID_ZAVAZNOST = 1 AND ""ID_Z"& _ 
                "AVAZNOST"" IS NULL) OR (""ID_ZAVAZNOST"" = @Original_ID_ZAVAZNOST)) AND ((@IsNull_I"& _ 
                "D_TYP = 1 AND ""ID_TYP"" IS NULL) OR (""ID_TYP"" = @Original_ID_TYP)) AND ((@IsNull_"& _ 
                "EXCHANGES1 = 1 AND ""EXCHANGES1"" IS NULL) OR (""EXCHANGES1"" = @Original_EXCHANGES1"& _ 
                ")) AND ((@IsNull_EXCHANGES2 = 1 AND ""EXCHANGES2"" IS NULL) OR (""EXCHANGES2"" = @Or"& _ 
                "iginal_EXCHANGES2)) AND ((@IsNull_PROVIDER = 1 AND ""PROVIDER"" IS NULL) OR (""PROV"& _ 
                "IDER"" = @Original_PROVIDER)) AND ((@IsNull_ZADANO = 1 AND ""ZADANO"" IS NULL) OR ("& _ 
                """ZADANO"" = @Original_ZADANO)) AND ((@IsNull_ZADANO_DB = 1 AND ""ZADANO_DB"" IS NUL"& _ 
                "L) OR (""ZADANO_DB"" = @Original_ZADANO_DB)) AND ((@IsNull_OD_KDY = 1 AND ""OD_KDY"""& _ 
                " IS NULL) OR (""OD_KDY"" = @Original_OD_KDY)) AND ((@IsNull_DO_KDY = 1 AND ""DO_KDY"& _ 
                """ IS NULL) OR (""DO_KDY"" = @Original_DO_KDY)) AND ((@IsNull_PREDMET = 1 AND ""PRED"& _ 
                "MET"" IS NULL) OR (""PREDMET"" = @Original_PREDMET)) AND ((@IsNull_NEM_CAS_ZAD = 1 "& _ 
                "AND ""NEM_CAS_ZAD"" IS NULL) OR (""NEM_CAS_ZAD"" = @Original_NEM_CAS_ZAD)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_TYP"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_TYP"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZADANO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZADANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZADANO_DB"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZADANO_DB"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_OD_KDY"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_DO_KDY"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PREDMET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_NEM_CAS_ZAD"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "NEM_CAS_ZAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_NEM_CAS_ZAD"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "NEM_CAS_ZAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""ZAZNAMY"" (""ID"", ""ID_MISTO"", ""ID_AUTOR"", ""ID_AUTOR2"", ""ID_ZAVAZNOST"","& _ 
                " ""ID_TYP"", ""EXCHANGES1"", ""EXCHANGES2"", ""PROVIDER"", ""ZADANO"", ""ZADANO_DB"", ""OD_KD"& _ 
                "Y"", ""DO_KDY"", ""PREDMET"", ""TEXT"", ""HISTORIE"", ""NEM_CAS_ZAD"") VALUES (@ID, @ID_MIS"& _ 
                "TO, @ID_AUTOR, @ID_AUTOR2, @ID_ZAVAZNOST, @ID_TYP, @EXCHANGES1, @EXCHANGES2, @PR"& _ 
                "OVIDER, @ZADANO, @ZADANO_DB, @OD_KDY, @DO_KDY, @PREDMET, @TEXT, @HISTORIE, @NEM_"& _ 
                "CAS_ZAD)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_TYP"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZADANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZADANO_DB"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TEXT"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "TEXT"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HISTORIE"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "HISTORIE"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@NEM_CAS_ZAD"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "NEM_CAS_ZAD"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""ZAZNAMY"" SET ""ID"" = @ID, ""ID_MISTO"" = @ID_MISTO, ""ID_AUTOR"" = @ID_AUTOR, "& _ 
                """ID_AUTOR2"" = @ID_AUTOR2, ""ID_ZAVAZNOST"" = @ID_ZAVAZNOST, ""ID_TYP"" = @ID_TYP, ""E"& _ 
                "XCHANGES1"" = @EXCHANGES1, ""EXCHANGES2"" = @EXCHANGES2, ""PROVIDER"" = @PROVIDER, ""Z"& _ 
                "ADANO"" = @ZADANO, ""ZADANO_DB"" = @ZADANO_DB, ""OD_KDY"" = @OD_KDY, ""DO_KDY"" = @DO_K"& _ 
                "DY, ""PREDMET"" = @PREDMET, ""TEXT"" = @TEXT, ""HISTORIE"" = @HISTORIE, ""NEM_CAS_ZAD"" "& _ 
                "= @NEM_CAS_ZAD WHERE (((@IsNull_ID = 1 AND ""ID"" IS NULL) OR (""ID"" = @Original_ID"& _ 
                ")) AND ((@IsNull_ID_MISTO = 1 AND ""ID_MISTO"" IS NULL) OR (""ID_MISTO"" = @Original"& _ 
                "_ID_MISTO)) AND ((@IsNull_ID_AUTOR = 1 AND ""ID_AUTOR"" IS NULL) OR (""ID_AUTOR"" = "& _ 
                "@Original_ID_AUTOR)) AND ((@IsNull_ID_AUTOR2 = 1 AND ""ID_AUTOR2"" IS NULL) OR (""I"& _ 
                "D_AUTOR2"" = @Original_ID_AUTOR2)) AND ((@IsNull_ID_ZAVAZNOST = 1 AND ""ID_ZAVAZNO"& _ 
                "ST"" IS NULL) OR (""ID_ZAVAZNOST"" = @Original_ID_ZAVAZNOST)) AND ((@IsNull_ID_TYP "& _ 
                "= 1 AND ""ID_TYP"" IS NULL) OR (""ID_TYP"" = @Original_ID_TYP)) AND ((@IsNull_EXCHAN"& _ 
                "GES1 = 1 AND ""EXCHANGES1"" IS NULL) OR (""EXCHANGES1"" = @Original_EXCHANGES1)) AND"& _ 
                " ((@IsNull_EXCHANGES2 = 1 AND ""EXCHANGES2"" IS NULL) OR (""EXCHANGES2"" = @Original"& _ 
                "_EXCHANGES2)) AND ((@IsNull_PROVIDER = 1 AND ""PROVIDER"" IS NULL) OR (""PROVIDER"" "& _ 
                "= @Original_PROVIDER)) AND ((@IsNull_ZADANO = 1 AND ""ZADANO"" IS NULL) OR (""ZADAN"& _ 
                "O"" = @Original_ZADANO)) AND ((@IsNull_ZADANO_DB = 1 AND ""ZADANO_DB"" IS NULL) OR "& _ 
                "(""ZADANO_DB"" = @Original_ZADANO_DB)) AND ((@IsNull_OD_KDY = 1 AND ""OD_KDY"" IS NU"& _ 
                "LL) OR (""OD_KDY"" = @Original_OD_KDY)) AND ((@IsNull_DO_KDY = 1 AND ""DO_KDY"" IS N"& _ 
                "ULL) OR (""DO_KDY"" = @Original_DO_KDY)) AND ((@IsNull_PREDMET = 1 AND ""PREDMET"" I"& _ 
                "S NULL) OR (""PREDMET"" = @Original_PREDMET)) AND ((@IsNull_NEM_CAS_ZAD = 1 AND ""N"& _ 
                "EM_CAS_ZAD"" IS NULL) OR (""NEM_CAS_ZAD"" = @Original_NEM_CAS_ZAD)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ID_TYP"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZADANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@ZADANO_DB"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@TEXT"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "TEXT"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@HISTORIE"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = "HISTORIE"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@NEM_CAS_ZAD"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "NEM_CAS_ZAD"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "ID"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_MISTO"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_MISTO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_AUTOR2"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_AUTOR2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_ZAVAZNOST"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_ZAVAZNOST"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ID_TYP"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ID_TYP"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "ID_TYP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_EXCHANGES1"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES1"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_EXCHANGES2"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "EXCHANGES2"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = "PROVIDER"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZADANO"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZADANO"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_ZADANO_DB"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_ZADANO_DB"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "ZADANO_DB"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_OD_KDY"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "OD_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_DO_KDY"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = "DO_KDY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_PREDMET"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = "PREDMET"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@IsNull_NEM_CAS_ZAD"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "NEM_CAS_ZAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "@Original_NEM_CAS_ZAD"
            param.DbType = Global.System.Data.DbType.Int16
            param.Size = 2
            param.IsNullable = true
            param.SourceColumn = "NEM_CAS_ZAD"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ID"", ""ID_MISTO"", ""ID_AUTOR"", ""ID_AUTOR2"", ""ID_ZAVAZNOST"", ""ID_TYP"", ""EXCH"& _ 
                "ANGES1"", ""EXCHANGES2"", ""PROVIDER"", ""ZADANO"", ""ZADANO_DB"", ""OD_KDY"", ""DO_KDY"", ""P"& _ 
                "REDMET"", ""TEXT"", ""HISTORIE"", ""NEM_CAS_ZAD"" FROM ""ZAZNAMY"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.ZAZNAMYDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DataSetEden.ZAZNAMYDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DataSetEden.ZAZNAMYDataTable = New DataSetEden.ZAZNAMYDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DataSetEden.ZAZNAMYDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DataSetEden) As Integer
            Return Me.Adapter.Update(dataSet, "ZAZNAMY")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Global.System.Nullable(Of Integer), ByVal Original_ID_MISTO As Global.System.Nullable(Of Short), ByVal Original_ID_AUTOR As Global.System.Nullable(Of Short), ByVal Original_ID_AUTOR2 As Global.System.Nullable(Of Short), ByVal Original_ID_ZAVAZNOST As Global.System.Nullable(Of Short), ByVal Original_ID_TYP As Global.System.Nullable(Of Short), ByVal Original_EXCHANGES1 As Global.System.Nullable(Of Integer), ByVal Original_EXCHANGES2 As Global.System.Nullable(Of Integer), ByVal Original_PROVIDER As Global.System.Nullable(Of Integer), ByVal Original_ZADANO As Global.System.Nullable(Of Date), ByVal Original_ZADANO_DB As Global.System.Nullable(Of Date), ByVal Original_OD_KDY As Global.System.Nullable(Of Date), ByVal Original_DO_KDY As Global.System.Nullable(Of Date), ByVal Original_PREDMET As String, ByVal Original_NEM_CAS_ZAD As Global.System.Nullable(Of Short)) As Integer
            If (Original_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_MISTO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_ID_MISTO.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_AUTOR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_ID_AUTOR.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_AUTOR2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_ID_AUTOR2.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_ZAVAZNOST.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_ID_ZAVAZNOST.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_TYP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_ID_TYP.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGES1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_EXCHANGES1.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGES2.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_EXCHANGES2.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (Original_PROVIDER.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_PROVIDER.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (Original_ZADANO.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_ZADANO.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Original_ZADANO_DB.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_ZADANO_DB.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (Original_OD_KDY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_OD_KDY.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (Original_DO_KDY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_DO_KDY.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDMET Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_PREDMET,String)
            End If
            If (Original_NEM_CAS_ZAD.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(Original_NEM_CAS_ZAD.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ID As Global.System.Nullable(Of Integer),  _
                    ByVal ID_MISTO As Global.System.Nullable(Of Short),  _
                    ByVal ID_AUTOR As Global.System.Nullable(Of Short),  _
                    ByVal ID_AUTOR2 As Global.System.Nullable(Of Short),  _
                    ByVal ID_ZAVAZNOST As Global.System.Nullable(Of Short),  _
                    ByVal ID_TYP As Global.System.Nullable(Of Short),  _
                    ByVal EXCHANGES1 As Global.System.Nullable(Of Integer),  _
                    ByVal EXCHANGES2 As Global.System.Nullable(Of Integer),  _
                    ByVal PROVIDER As Global.System.Nullable(Of Integer),  _
                    ByVal ZADANO As Global.System.Nullable(Of Date),  _
                    ByVal ZADANO_DB As Global.System.Nullable(Of Date),  _
                    ByVal OD_KDY As Global.System.Nullable(Of Date),  _
                    ByVal DO_KDY As Global.System.Nullable(Of Date),  _
                    ByVal PREDMET As String,  _
                    ByVal TEXT As String,  _
                    ByVal HISTORIE As String,  _
                    ByVal NEM_CAS_ZAD As Global.System.Nullable(Of Short)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_MISTO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ID_MISTO.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ID_AUTOR.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ID_AUTOR2.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAVAZNOST.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ID_ZAVAZNOST.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ID_TYP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ID_TYP.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGES1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(EXCHANGES1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGES2.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(EXCHANGES2.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PROVIDER.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PROVIDER.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ZADANO.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ZADANO.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ZADANO_DB.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ZADANO_DB.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (OD_KDY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(OD_KDY.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DO_KDY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(DO_KDY.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PREDMET Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(PREDMET,String)
            End If
            If (TEXT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(TEXT,String)
            End If
            If (HISTORIE Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(HISTORIE,String)
            End If
            If (NEM_CAS_ZAD.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NEM_CAS_ZAD.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ID As Global.System.Nullable(Of Integer),  _
                    ByVal ID_MISTO As Global.System.Nullable(Of Short),  _
                    ByVal ID_AUTOR As Global.System.Nullable(Of Short),  _
                    ByVal ID_AUTOR2 As Global.System.Nullable(Of Short),  _
                    ByVal ID_ZAVAZNOST As Global.System.Nullable(Of Short),  _
                    ByVal ID_TYP As Global.System.Nullable(Of Short),  _
                    ByVal EXCHANGES1 As Global.System.Nullable(Of Integer),  _
                    ByVal EXCHANGES2 As Global.System.Nullable(Of Integer),  _
                    ByVal PROVIDER As Global.System.Nullable(Of Integer),  _
                    ByVal ZADANO As Global.System.Nullable(Of Date),  _
                    ByVal ZADANO_DB As Global.System.Nullable(Of Date),  _
                    ByVal OD_KDY As Global.System.Nullable(Of Date),  _
                    ByVal DO_KDY As Global.System.Nullable(Of Date),  _
                    ByVal PREDMET As String,  _
                    ByVal TEXT As String,  _
                    ByVal HISTORIE As String,  _
                    ByVal NEM_CAS_ZAD As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ID_MISTO As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID_AUTOR As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID_AUTOR2 As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID_ZAVAZNOST As Global.System.Nullable(Of Short),  _
                    ByVal Original_ID_TYP As Global.System.Nullable(Of Short),  _
                    ByVal Original_EXCHANGES1 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_EXCHANGES2 As Global.System.Nullable(Of Integer),  _
                    ByVal Original_PROVIDER As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ZADANO As Global.System.Nullable(Of Date),  _
                    ByVal Original_ZADANO_DB As Global.System.Nullable(Of Date),  _
                    ByVal Original_OD_KDY As Global.System.Nullable(Of Date),  _
                    ByVal Original_DO_KDY As Global.System.Nullable(Of Date),  _
                    ByVal Original_PREDMET As String,  _
                    ByVal Original_NEM_CAS_ZAD As Global.System.Nullable(Of Short)) As Integer
            If (ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_MISTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ID_MISTO.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID_AUTOR.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ID_AUTOR2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAVAZNOST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ID_ZAVAZNOST.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ID_TYP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ID_TYP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGES1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(EXCHANGES1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (EXCHANGES2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(EXCHANGES2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PROVIDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PROVIDER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (ZADANO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ZADANO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (ZADANO_DB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ZADANO_DB.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (OD_KDY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(OD_KDY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (DO_KDY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(DO_KDY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (PREDMET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(PREDMET,String)
            End If
            If (TEXT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(TEXT,String)
            End If
            If (HISTORIE Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(HISTORIE,String)
            End If
            If (NEM_CAS_ZAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NEM_CAS_ZAD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_MISTO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_ID_MISTO.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_AUTOR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_ID_AUTOR.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_AUTOR2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_ID_AUTOR2.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_ZAVAZNOST.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_ID_ZAVAZNOST.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_ID_TYP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_ID_TYP.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGES1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_EXCHANGES1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_EXCHANGES2.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_EXCHANGES2.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_PROVIDER.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_PROVIDER.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_ZADANO.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_ZADANO.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_ZADANO_DB.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_ZADANO_DB.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_OD_KDY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_OD_KDY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_DO_KDY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_DO_KDY.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_PREDMET Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_PREDMET,String)
            End If
            If (Original_NEM_CAS_ZAD.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_NEM_CAS_ZAD.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PS_ZAZ_ADDTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PS_ZAZ_ADD"
            tableMapping.ColumnMappings.Add("OK", "OK")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = """PS_ZAZ_ADD"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "HOME"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "ID_ZAV"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "ID_TYP"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "TXT"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.PS_ZAZ_ADDDataTable, ByVal HOME As Global.System.Nullable(Of Integer), ByVal ID_AUTOR As Global.System.Nullable(Of Integer), ByVal ID_ZAV As Global.System.Nullable(Of Integer), ByVal ID_TYP As Global.System.Nullable(Of Integer), ByVal PREDMET As String, ByVal TXT As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (HOME.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(HOME.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_AUTOR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAV.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ID_ZAV.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_TYP.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ID_TYP.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PREDMET Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(PREDMET,String)
            End If
            If (TXT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(TXT,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal HOME As Global.System.Nullable(Of Integer), ByVal ID_AUTOR As Global.System.Nullable(Of Integer), ByVal ID_ZAV As Global.System.Nullable(Of Integer), ByVal ID_TYP As Global.System.Nullable(Of Integer), ByVal PREDMET As String, ByVal TXT As String) As DataSetEden.PS_ZAZ_ADDDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (HOME.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(HOME.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_AUTOR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAV.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ID_ZAV.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_TYP.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ID_TYP.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PREDMET Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(PREDMET,String)
            End If
            If (TXT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(TXT,String)
            End If
            Dim dataTable As DataSetEden.PS_ZAZ_ADDDataTable = New DataSetEden.PS_ZAZ_ADDDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PS_ZAZ_ADD_NEWTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
        
        Private _connection As Global.FirebirdSql.Data.FirebirdClient.FbConnection
        
        Private _transaction As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
        
        Private _commandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.FirebirdSql.Data.FirebirdClient.FbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.FirebirdSql.Data.FirebirdClient.FbTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.FirebirdSql.Data.FirebirdClient.FbDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PS_ZAZ_ADD_NEW"
            tableMapping.ColumnMappings.Add("OK", "OK")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection()
            Me._connection.ConnectionString = Global.WAgit.My.MySettings.Default.ConnectionEden
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.FirebirdSql.Data.FirebirdClient.FbCommand(0) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = """PS_ZAZ_ADD_NEW"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Dim param As Global.FirebirdSql.Data.FirebirdClient.FbParameter = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "HOME"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "ID_AUTOR"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "ID_ZAV"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "ID_TYP"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "PREDMET"
            param.Size = 255
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "TXT"
            param.Size = 2147483647
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "OD_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "DO_KDY"
            param.DbType = Global.System.Data.DbType.DateTime
            param.Size = 8
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
            param = New Global.FirebirdSql.Data.FirebirdClient.FbParameter()
            param.ParameterName = "PROVIDER"
            param.DbType = Global.System.Data.DbType.Int32
            param.Size = 4
            param.IsNullable = true
            param.SourceColumn = Nothing
            Me._commandCollection(0).Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DataSetEden.PS_ZAZ_ADD_NEWDataTable, ByVal HOME As Global.System.Nullable(Of Integer), ByVal ID_AUTOR As Global.System.Nullable(Of Integer), ByVal ID_ZAV As Global.System.Nullable(Of Integer), ByVal ID_TYP As Global.System.Nullable(Of Integer), ByVal PREDMET As String, ByVal TXT As String, ByVal OD_KDY As Global.System.Nullable(Of Date), ByVal DO_KDY As Global.System.Nullable(Of Date), ByVal PROVIDER As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (HOME.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(HOME.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_AUTOR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAV.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ID_ZAV.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_TYP.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ID_TYP.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PREDMET Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(PREDMET,String)
            End If
            If (TXT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(TXT,String)
            End If
            If (OD_KDY.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(OD_KDY.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DO_KDY.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(DO_KDY.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PROVIDER.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(PROVIDER.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal HOME As Global.System.Nullable(Of Integer), ByVal ID_AUTOR As Global.System.Nullable(Of Integer), ByVal ID_ZAV As Global.System.Nullable(Of Integer), ByVal ID_TYP As Global.System.Nullable(Of Integer), ByVal PREDMET As String, ByVal TXT As String, ByVal OD_KDY As Global.System.Nullable(Of Date), ByVal DO_KDY As Global.System.Nullable(Of Date), ByVal PROVIDER As Global.System.Nullable(Of Integer)) As DataSetEden.PS_ZAZ_ADD_NEWDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (HOME.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(HOME.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ID_AUTOR.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ID_AUTOR.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ID_ZAV.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(ID_ZAV.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (ID_TYP.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ID_TYP.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (PREDMET Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(PREDMET,String)
            End If
            If (TXT Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(5).Value = CType(TXT,String)
            End If
            If (OD_KDY.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(6).Value = CType(OD_KDY.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (DO_KDY.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(7).Value = CType(DO_KDY.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (PROVIDER.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(8).Value = CType(PROVIDER.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As DataSetEden.PS_ZAZ_ADD_NEWDataTable = New DataSetEden.PS_ZAZ_ADD_NEWDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QueriesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private _commandCollection() As Global.System.Data.IDbCommand
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(1) {}
            Me._commandCollection(0) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            CType(Me._commandCollection(0),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection(Global.WAgit.My.MySettings.Default.ConnectionEden)
            CType(Me._commandCollection(0),Global.FirebirdSql.Data.FirebirdClient.FbCommand).CommandText = """ODPOJIT"""
            CType(Me._commandCollection(0),Global.FirebirdSql.Data.FirebirdClient.FbCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(1) = New Global.FirebirdSql.Data.FirebirdClient.FbCommand()
            CType(Me._commandCollection(1),Global.FirebirdSql.Data.FirebirdClient.FbCommand).Connection = New Global.FirebirdSql.Data.FirebirdClient.FbConnection(Global.WAgit.My.MySettings.Default.ConnectionEden)
            CType(Me._commandCollection(1),Global.FirebirdSql.Data.FirebirdClient.FbCommand).CommandText = """TEST"""
            CType(Me._commandCollection(1),Global.FirebirdSql.Data.FirebirdClient.FbCommand).CommandType = Global.System.Data.CommandType.StoredProcedure
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function ODPOJIT() As Integer
            Dim command As Global.FirebirdSql.Data.FirebirdClient.FbCommand = CType(Me.CommandCollection(0),Global.FirebirdSql.Data.FirebirdClient.FbCommand)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function TEST() As Integer
            Dim command As Global.FirebirdSql.Data.FirebirdClient.FbCommand = CType(Me.CommandCollection(1),Global.FirebirdSql.Data.FirebirdClient.FbCommand)
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _aUTORITableAdapter As AUTORITableAdapter
        
        Private _mISTATableAdapter As MISTATableAdapter
        
        Private _oDKAZYTableAdapter As ODKAZYTableAdapter
        
        Private _pROVIDERTableAdapter As PROVIDERTableAdapter
        
        Private _sLOVNIKTableAdapter As SLOVNIKTableAdapter
        
        Private _tBINTableAdapter As TBINTableAdapter
        
        Private _tYPYTableAdapter As TYPYTableAdapter
        
        Private _uSTREDNYTableAdapter As USTREDNYTableAdapter
        
        Private _zAMKYTableAdapter As ZAMKYTableAdapter
        
        Private _zAVAZNOSTITableAdapter As ZAVAZNOSTITableAdapter
        
        Private _zAZNAMYTableAdapter As ZAZNAMYTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property AUTORITableAdapter() As AUTORITableAdapter
            Get
                Return Me._aUTORITableAdapter
            End Get
            Set
                Me._aUTORITableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MISTATableAdapter() As MISTATableAdapter
            Get
                Return Me._mISTATableAdapter
            End Get
            Set
                Me._mISTATableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ODKAZYTableAdapter() As ODKAZYTableAdapter
            Get
                Return Me._oDKAZYTableAdapter
            End Get
            Set
                Me._oDKAZYTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property PROVIDERTableAdapter() As PROVIDERTableAdapter
            Get
                Return Me._pROVIDERTableAdapter
            End Get
            Set
                Me._pROVIDERTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property SLOVNIKTableAdapter() As SLOVNIKTableAdapter
            Get
                Return Me._sLOVNIKTableAdapter
            End Get
            Set
                Me._sLOVNIKTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TBINTableAdapter() As TBINTableAdapter
            Get
                Return Me._tBINTableAdapter
            End Get
            Set
                Me._tBINTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TYPYTableAdapter() As TYPYTableAdapter
            Get
                Return Me._tYPYTableAdapter
            End Get
            Set
                Me._tYPYTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property USTREDNYTableAdapter() As USTREDNYTableAdapter
            Get
                Return Me._uSTREDNYTableAdapter
            End Get
            Set
                Me._uSTREDNYTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZAMKYTableAdapter() As ZAMKYTableAdapter
            Get
                Return Me._zAMKYTableAdapter
            End Get
            Set
                Me._zAMKYTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZAVAZNOSTITableAdapter() As ZAVAZNOSTITableAdapter
            Get
                Return Me._zAVAZNOSTITableAdapter
            End Get
            Set
                Me._zAVAZNOSTITableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ZAZNAMYTableAdapter() As ZAZNAMYTableAdapter
            Get
                Return Me._zAZNAMYTableAdapter
            End Get
            Set
                Me._zAZNAMYTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aUTORITableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._aUTORITableAdapter.Connection) Is Nothing)) Then
                    Return Me._aUTORITableAdapter.Connection
                End If
                If ((Not (Me._mISTATableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._mISTATableAdapter.Connection) Is Nothing)) Then
                    Return Me._mISTATableAdapter.Connection
                End If
                If ((Not (Me._oDKAZYTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._oDKAZYTableAdapter.Connection) Is Nothing)) Then
                    Return Me._oDKAZYTableAdapter.Connection
                End If
                If ((Not (Me._pROVIDERTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._pROVIDERTableAdapter.Connection) Is Nothing)) Then
                    Return Me._pROVIDERTableAdapter.Connection
                End If
                If ((Not (Me._sLOVNIKTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._sLOVNIKTableAdapter.Connection) Is Nothing)) Then
                    Return Me._sLOVNIKTableAdapter.Connection
                End If
                If ((Not (Me._tBINTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tBINTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tBINTableAdapter.Connection
                End If
                If ((Not (Me._tYPYTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tYPYTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tYPYTableAdapter.Connection
                End If
                If ((Not (Me._uSTREDNYTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uSTREDNYTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uSTREDNYTableAdapter.Connection
                End If
                If ((Not (Me._zAMKYTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zAMKYTableAdapter.Connection) Is Nothing)) Then
                    Return Me._zAMKYTableAdapter.Connection
                End If
                If ((Not (Me._zAVAZNOSTITableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zAVAZNOSTITableAdapter.Connection) Is Nothing)) Then
                    Return Me._zAVAZNOSTITableAdapter.Connection
                End If
                If ((Not (Me._zAZNAMYTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._zAZNAMYTableAdapter.Connection) Is Nothing)) Then
                    Return Me._zAZNAMYTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aUTORITableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._mISTATableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._oDKAZYTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._pROVIDERTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._sLOVNIKTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tBINTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tYPYTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uSTREDNYTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zAMKYTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zAVAZNOSTITableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._zAZNAMYTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DataSetEden, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aUTORITableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.AUTORI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aUTORITableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._mISTATableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MISTA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._mISTATableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tYPYTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TYPY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tYPYTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zAVAZNOSTITableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZAVAZNOSTI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zAVAZNOSTITableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._oDKAZYTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ODKAZY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._oDKAZYTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._pROVIDERTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.PROVIDER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._pROVIDERTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._sLOVNIKTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.SLOVNIK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._sLOVNIKTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tBINTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TBIN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tBINTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uSTREDNYTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.USTREDNY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uSTREDNYTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zAMKYTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZAMKY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zAMKYTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._zAZNAMYTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ZAZNAMY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._zAZNAMYTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DataSetEden, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aUTORITableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.AUTORI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aUTORITableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._mISTATableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MISTA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._mISTATableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tYPYTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TYPY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tYPYTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zAVAZNOSTITableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZAVAZNOSTI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zAVAZNOSTITableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._oDKAZYTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ODKAZY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._oDKAZYTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._pROVIDERTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.PROVIDER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._pROVIDERTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._sLOVNIKTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.SLOVNIK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._sLOVNIKTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tBINTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TBIN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tBINTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uSTREDNYTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.USTREDNY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uSTREDNYTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zAMKYTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZAMKY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zAMKYTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._zAZNAMYTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ZAZNAMY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._zAZNAMYTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DataSetEden, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._zAZNAMYTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZAZNAMY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zAZNAMYTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zAMKYTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZAMKY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zAMKYTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._uSTREDNYTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.USTREDNY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uSTREDNYTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tBINTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TBIN.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tBINTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._sLOVNIKTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.SLOVNIK.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._sLOVNIKTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._pROVIDERTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.PROVIDER.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._pROVIDERTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._oDKAZYTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ODKAZY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._oDKAZYTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._zAVAZNOSTITableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ZAVAZNOSTI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._zAVAZNOSTITableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tYPYTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TYPY.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tYPYTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._mISTATableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MISTA.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._mISTATableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aUTORITableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.AUTORI.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aUTORITableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DataSetEden) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._aUTORITableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aUTORITableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._mISTATableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._mISTATableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._oDKAZYTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._oDKAZYTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._pROVIDERTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._pROVIDERTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._sLOVNIKTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._sLOVNIKTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tBINTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tBINTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tYPYTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tYPYTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._uSTREDNYTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uSTREDNYTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zAMKYTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zAMKYTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zAVAZNOSTITableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zAVAZNOSTITableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._zAZNAMYTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._zAZNAMYTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._aUTORITableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aUTORITableAdapter, Me._aUTORITableAdapter.Connection)
                    Me._aUTORITableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._aUTORITableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._aUTORITableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aUTORITableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aUTORITableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._mISTATableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._mISTATableAdapter, Me._mISTATableAdapter.Connection)
                    Me._mISTATableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._mISTATableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._mISTATableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._mISTATableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._mISTATableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._oDKAZYTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._oDKAZYTableAdapter, Me._oDKAZYTableAdapter.Connection)
                    Me._oDKAZYTableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._oDKAZYTableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._oDKAZYTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._oDKAZYTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._oDKAZYTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._pROVIDERTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._pROVIDERTableAdapter, Me._pROVIDERTableAdapter.Connection)
                    Me._pROVIDERTableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._pROVIDERTableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._pROVIDERTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._pROVIDERTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._pROVIDERTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._sLOVNIKTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._sLOVNIKTableAdapter, Me._sLOVNIKTableAdapter.Connection)
                    Me._sLOVNIKTableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._sLOVNIKTableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._sLOVNIKTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._sLOVNIKTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._sLOVNIKTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tBINTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tBINTableAdapter, Me._tBINTableAdapter.Connection)
                    Me._tBINTableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._tBINTableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._tBINTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tBINTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tBINTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tYPYTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tYPYTableAdapter, Me._tYPYTableAdapter.Connection)
                    Me._tYPYTableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._tYPYTableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._tYPYTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tYPYTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tYPYTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uSTREDNYTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uSTREDNYTableAdapter, Me._uSTREDNYTableAdapter.Connection)
                    Me._uSTREDNYTableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._uSTREDNYTableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._uSTREDNYTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uSTREDNYTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uSTREDNYTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zAMKYTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zAMKYTableAdapter, Me._zAMKYTableAdapter.Connection)
                    Me._zAMKYTableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._zAMKYTableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._zAMKYTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zAMKYTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zAMKYTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zAVAZNOSTITableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zAVAZNOSTITableAdapter, Me._zAVAZNOSTITableAdapter.Connection)
                    Me._zAVAZNOSTITableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._zAVAZNOSTITableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._zAVAZNOSTITableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zAVAZNOSTITableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zAVAZNOSTITableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._zAZNAMYTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._zAZNAMYTableAdapter, Me._zAZNAMYTableAdapter.Connection)
                    Me._zAZNAMYTableAdapter.Connection = CType(workConnection,Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._zAZNAMYTableAdapter.Transaction = CType(workTransaction,Global.FirebirdSql.Data.FirebirdClient.FbTransaction)
                    If Me._zAZNAMYTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._zAZNAMYTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._zAZNAMYTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._aUTORITableAdapter) Is Nothing) Then
                    Me._aUTORITableAdapter.Connection = CType(revertConnections(Me._aUTORITableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._aUTORITableAdapter.Transaction = Nothing
                End If
                If (Not (Me._mISTATableAdapter) Is Nothing) Then
                    Me._mISTATableAdapter.Connection = CType(revertConnections(Me._mISTATableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._mISTATableAdapter.Transaction = Nothing
                End If
                If (Not (Me._oDKAZYTableAdapter) Is Nothing) Then
                    Me._oDKAZYTableAdapter.Connection = CType(revertConnections(Me._oDKAZYTableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._oDKAZYTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._pROVIDERTableAdapter) Is Nothing) Then
                    Me._pROVIDERTableAdapter.Connection = CType(revertConnections(Me._pROVIDERTableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._pROVIDERTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._sLOVNIKTableAdapter) Is Nothing) Then
                    Me._sLOVNIKTableAdapter.Connection = CType(revertConnections(Me._sLOVNIKTableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._sLOVNIKTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tBINTableAdapter) Is Nothing) Then
                    Me._tBINTableAdapter.Connection = CType(revertConnections(Me._tBINTableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._tBINTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tYPYTableAdapter) Is Nothing) Then
                    Me._tYPYTableAdapter.Connection = CType(revertConnections(Me._tYPYTableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._tYPYTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uSTREDNYTableAdapter) Is Nothing) Then
                    Me._uSTREDNYTableAdapter.Connection = CType(revertConnections(Me._uSTREDNYTableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._uSTREDNYTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zAMKYTableAdapter) Is Nothing) Then
                    Me._zAMKYTableAdapter.Connection = CType(revertConnections(Me._zAMKYTableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._zAMKYTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zAVAZNOSTITableAdapter) Is Nothing) Then
                    Me._zAVAZNOSTITableAdapter.Connection = CType(revertConnections(Me._zAVAZNOSTITableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._zAVAZNOSTITableAdapter.Transaction = Nothing
                End If
                If (Not (Me._zAZNAMYTableAdapter) Is Nothing) Then
                    Me._zAZNAMYTableAdapter.Connection = CType(revertConnections(Me._zAZNAMYTableAdapter),Global.FirebirdSql.Data.FirebirdClient.FbConnection)
                    Me._zAZNAMYTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
